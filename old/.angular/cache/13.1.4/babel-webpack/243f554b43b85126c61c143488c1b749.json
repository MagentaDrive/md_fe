{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Thomas\\\\Desktop\\\\md_fe\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"C:\\\\Users\\\\Thomas\\\\Desktop\\\\md_fe\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport { r as registerInstance, c as createEvent, h, a as Host, g as getElement } from './index-f2e5998d.js';\nimport { c as classnames } from './index-713f92a5.js';\nimport { s as statusNote } from './status-note-d227f142.js';\nimport { e as emitEvent } from './utils-524c237e.js';\nvar inputCss = \".input{position:relative}.input .input__helper-text,.input .input__counter{font-weight:var(--scl-font-weight-bold)}.input .input__input,.input .input__select{width:100%;height:var(--scl-spacing-48);margin:0;display:flex;outline:none;padding:var(--scl-spacing-12) var(--scl-spacing-12);z-index:1;box-sizing:border-box;transition:all var(--scl-motion-duration-fast)\\n    var(--scl-motion-easing-standard);font-family:inherit;font-size:var(--scl-font-size-16);border-radius:var(--scl-radius-8);border:var(--scl-spacing-1) solid var(--scl-color-grey-90)}.input .input__textarea{width:100%;margin:0;resize:vertical;display:flex;outline:none;padding:var(--scl-spacing-12) var(--scl-spacing-12);z-index:1;box-sizing:border-box;transition:all var(--scl-motion-duration-fast)\\n    var(--scl-motion-easing-standard);font-family:inherit;font-size:var(--scl-font-size-16);border-radius:var(--scl-radius-8);border:var(--scl-spacing-1) solid var(--scl-color-text-standard)}.input .input__select{appearance:none;-webkit-appearance:none}.input .input__select-wrapper{position:relative}.input .input__counter{display:flex;transition:all var(--scl-motion-duration-fast)\\n    var(--scl-motion-easing-standard);margin-left:auto;padding-right:var(--scl-spacing-12);justify-content:flex-end;font-size:var(--scl-font-size-12);line-height:var(--scl-font-line-height-133);color:var(--scl-color-text-standard)}.input .input__helper-text{transition:all var(--scl-motion-duration-fast)\\n    var(--scl-motion-easing-standard);padding-left:var(--scl-spacing-12);font-size:var(--scl-font-size-12);line-height:var(--scl-font-line-height-133);color:var(--scl-color-blue-70)}.input .input__meta{display:flex;justify-content:space-between;margin-top:var(--scl-spacing-4)}.input:not(.input--disabled):hover .input__select-wrapper{--icon-color:var(--scl-color-primary-hover, #f90984)}.input:not(.input--disabled):active .input__select-wrapper{--icon-color:var(--scl-color-primary-active, #cb0068)}.input:not(.input--disabled) .input__input:hover,.input:not(.input--disabled) .input__input:focus,.input:not(.input--disabled) .input__select:hover,.input:not(.input--disabled) .input__select:focus,.input:not(.input--disabled) .input__textarea:hover,.input:not(.input--disabled) .input__textarea:focus{border-color:var(--scl-color-primary-hover, #f90984)}.input:not(.input--disabled) .input__input:focus,.input:not(.input--disabled) .input__select:focus,.input:not(.input--disabled) .input__textarea:focus{box-shadow:0 0 0 var(--scl-spacing-2) var(--scl-color-focus)}.input:not(.input--disabled) .input__input:focus::placeholder,.input:not(.input--disabled) .input__select:focus::placeholder,.input:not(.input--disabled) .input__textarea:focus::placeholder{color:var(--scl-color-grey-60);transition:all var(--scl-motion-duration-fast)\\n    var(--scl-motion-easing-standard)}.input .input__select-wrapper scale-icon{top:50%;right:var(--scl-spacing-12);position:absolute;transform:translateY(-50%);pointer-events:none}.input .input__input::placeholder,.input .input__select::placeholder,.input .input__textarea::placeholder,.input ::placeholder{color:transparent;transition:all var(--scl-motion-duration-fast)\\n    var(--scl-motion-easing-standard)}.input--variant-static .input__label{color:var(--scl-color-grey-60);display:flex;font-weight:var(--scl-font-weight-medium)}.input--variant-animated .input__input,.input--variant-animated .input__select{padding:var(--scl-spacing-12) var(--scl-spacing-12) 0\\n    calc(var(--scl-spacing-12) - 1px)}.input--variant-animated .input__textarea{padding-top:var(--scl-spacing-24)}.input--variant-animated .input__label{top:0;left:0;color:var(--scl-color-grey-60);display:flex;z-index:var(--scl-z-index-10);position:absolute;transition:all var(--scl-motion-duration-fast)\\n    var(--scl-motion-easing-standard);pointer-events:none;font-size:var(--scl-font-size-16);transform:translate(\\n    var(--scl-spacing-12),\\n    calc((var(--scl-spacing-48) - var(--scl-font-size-16)) / 2)\\n  );font-weight:var(--scl-font-weight-medium)}.input--variant-animated.input--has-focus .input__label,.input--variant-animated.animated .input__label{color:var(--scl-color-grey-60);transform:translate(var(--scl-spacing-12), var(--scl-spacing-8));transition:all var(--scl-motion-duration-fast)\\n    var(--scl-motion-easing-standard);font-size:var(--scl-font-size-10);font-weight:var(--scl-font-weight-bold)}.input--status-error .input__input,.input--status-error .input__textarea,.input--status-error .input__select{border:var(--scl-spacing-2) solid var(--scl-color-background-error)}.input--status-error .input__helper-text{color:var(--scl-color-text-error)}.input--status-error .input__counter{color:var(--scl-color-text-error)}.input--size-small .input__input{height:var(--scl-spacing-40)}.input--size-small .input__select{height:var(--scl-spacing-40)}.input--size-small .input__label{top:0;left:0;color:var(--scl-color-grey-60);display:flex;z-index:var(--scl-z-index-10);position:absolute;transition:all var(--scl-motion-duration-fast)\\n    var(--scl-motion-easing-standard);pointer-events:none;font-size:var(--scl-font-size-16);transform:translate(\\n    var(--scl-spacing-12),\\n    calc((var(--scl-spacing-40) - var(--scl-font-size-16)) / 2)\\n  );font-weight:var(--scl-font-weight-medium)}.input--size-small.input--has-focus .input__label,.input--size-small.animated .input__label{color:var(--scl-color-grey-60);transform:translate(var(--scl-spacing-12), var(--scl-spacing-4));transition:all var(--scl-motion-duration-fast)\\n    var(--scl-motion-easing-standard);font-size:var(--scl-font-size-10);font-weight:var(--scl-font-weight-medium)}.input--transparent .input__input,.input--transparent .input__textarea,.input--transparent.input--type-radio .input__radio,.input--transparent .input__select{background-color:transparent}.input--type-checkbox{display:flex;flex-wrap:wrap;align-items:center}.input--type-checkbox input{width:0;height:0;opacity:0;position:absolute}.input--type-checkbox .input__meta{width:100%}.input--type-checkbox .input__helper-text{padding-left:var(--scl-spacing-32)}.input--type-checkbox label{color:var(--scl-color-text-standard);font-weight:var(--scl-font-weight-medium)}.input--type-checkbox .input__checkbox-container{width:var(--scl-spacing-16);height:var(--scl-spacing-16);display:flex;position:relative;align-items:center;margin-right:var(--scl-spacing-8)}.input--type-checkbox input:disabled~label{color:var(--scl-color-background-disabled)}.input--type-checkbox input:checked:disabled~label{color:var(--scl-color-background-disabled)}.input--type-checkbox input:checked:disabled~.input__checkbox-container .input__checkbox-placeholder{background:var(--scl-color-background-disabled)}.input--type-checkbox input:checked:disabled~.input__checkbox-container scale-icon{--icon-color:var(--scl-color-grey-30)}.input--type-checkbox input:checked:not([disabled]):hover~.input__checkbox-container .input__checkbox-placeholder,.input--type-checkbox input:checked:not([disabled])~.input__checkbox-container:hover .input__checkbox-placeholder{box-shadow:none;border-color:var(--scl-color-primary-hover, #f90984);background:var(--scl-color-primary-hover, #f90984)}.input--type-checkbox input:checked:not([disabled]):active~.input__checkbox-container .input__checkbox-placeholder,.input--type-checkbox input:checked:not([disabled])~.input__checkbox-container:active .input__checkbox-placeholder{border-color:var(--scl-color-primary-active, #cb0068);background:var(--scl-color-primary-active, #cb0068)}.input--type-checkbox input:checked:not([disabled]):active~.input__checkbox-container scale-icon,.input--type-checkbox input:checked:not([disabled])~.input__checkbox-container:active scale-icon{--icon-color:var(--scl-color-white)}.input--type-checkbox input:checked:not([disabled])~.input__checkbox-container .input__checkbox-placeholder{border:var(--scl-spacing-1) solid var(--scl-color-primary, #e20074);background:var(--scl-color-primary, #e20074)}.input--type-checkbox input:disabled~.input__checkbox-container .input__checkbox-placeholder{border-color:var(--scl-color-background-disabled)}.input--type-checkbox input:focus~.input__checkbox-container .input__checkbox-placeholder{box-shadow:0 0 0 var(--scl-spacing-2) var(--scl-color-focus)}.input--type-checkbox input:not([disabled]):hover~.input__checkbox-container .input__checkbox-placeholder,.input--type-checkbox input:not([disabled])~.input__checkbox-container:hover .input__checkbox-placeholder{box-shadow:none;border-color:var(--scl-color-primary-hover, #f90984)}.input--type-checkbox input:not([disabled]):hover~.input__checkbox-container~label,.input--type-checkbox input:not([disabled])~.input__checkbox-container:hover~label{color:var(--scl-color-primary-hover, #f90984)}.input--type-checkbox input:not([disabled]):active~.input__checkbox-container .input__checkbox-placeholder,.input--type-checkbox input:not([disabled])~.input__checkbox-container:active .input__checkbox-placeholder{border-color:var(--scl-color-primary-active, #cb0068);background:var(--scl-color-primary-active, #cb0068)}.input--type-checkbox input:not([disabled]):active~.input__checkbox-container scale-icon,.input--type-checkbox input:not([disabled])~.input__checkbox-container:active scale-icon{--icon-color:var(--scl-color-primary-active, #cb0068)}.input--type-checkbox input:not([disabled]):active~.input__checkbox-container~label,.input--type-checkbox input:not([disabled])~.input__checkbox-container:active~label{color:var(--scl-color-primary-active, #cb0068)}.input--type-checkbox .input__checkbox-container .input__checkbox-placeholder{width:var(--scl-spacing-16);height:var(--scl-spacing-16);margin:0;box-sizing:border-box;transition:all var(--scl-motion-duration-fast)\\n    var(--scl-motion-easing-standard);border-radius:var(--scl-radius-8);border:var(--scl-spacing-1) solid var(--scl-color-text-standard);background:var(--scl-color-background-standard)}.input--type-checkbox .input__checkbox-container scale-icon{top:calc(0.5 * var(--scl-spacing-12));left:calc(0.5 * var(--scl-spacing-12));width:var(--scl-spacing-12);height:var(--scl-spacing-12);position:absolute;user-select:none;--icon-color:var(--scl-color-background-standard)}.input--type-checkbox .input__checkbox-container~label{transition:all var(--scl-motion-duration-fast)\\n    var(--scl-motion-easing-standard)}.input--type-checkbox.input--status-error .input__checkbox-container .input__checkbox-placeholder{border:var(--scl-spacing-2) solid var(--scl-color-background-error)}.input--type-radio{display:flex;flex-wrap:wrap;align-items:center}.input--type-radio .input__meta{width:100%}.input--type-radio .input__helper-text{margin-top:var(--scl-spacing-4);padding-left:var(--scl-spacing-24)}.input--type-radio label{color:var(--scl-color-text-standard);transition:all var(--scl-motion-duration-fast)\\n    var(--scl-motion-easing-standard);font-weight:var(--scl-font-weight-medium)}.input--type-radio input{width:var(--scl-spacing-16);height:var(--scl-spacing-16);transition:all var(--scl-motion-duration-fast)\\n    var(--scl-motion-easing-standard);border-radius:50%;-webkit-appearance:none;background-color:#fff;border:var(--scl-spacing-1) solid var(--scl-color-text-standard);margin:0 var(--scl-spacing-8) 0 0}.input--type-radio input:focus{outline:none;box-shadow:0 0 0 var(--scl-spacing-2) var(--scl-color-focus)}.input--type-radio:hover input:not(:checked):not([disabled]){box-shadow:none;border-color:var(--scl-color-primary-hover, #f90984)}.input--type-radio:hover input:not(:checked):not([disabled])~label{color:var(--scl-color-primary-hover, #f90984)}.input--type-radio input:active{border:var(--scl-spacing-8) solid var(--scl-color-primary-active)}.input--type-radio input:not(:checked):not([disabled]):active~label{color:var(--scl-color-primary-active)}.input--type-radio input:disabled{border:var(--scl-spacing-1) solid var(--scl-color-background-disabled)}.input--type-radio input:disabled~label{color:var(--scl-color-grey-30)}.input--type-radio.input--status-error input{border:var(--scl-spacing-2) solid var(--scl-color-background-error)}.input--type-radio input:checked{border:calc(0.5 * var(--scl-spacing-12)) solid var(--scl-color-primary)}.input--type-radio input:checked:active{border:calc(0.5 * var(--scl-spacing-12)) solid\\n    var(--scl-color-primary-active, #cb0068)}.input--type-radio input:checked:disabled{background:var(--scl-color-grey-30);border:calc(0.5 * var(--scl-spacing-12)) solid\\n    var(--scl-color-background-disabled)}.input--type-radio input:checked:disabled~label{color:var(--scl-color-grey-30)}.input__textarea-label-safety-background{top:var(--scl-spacing-2);left:var(--scl-spacing-2);right:var(--scl-spacing-2);position:absolute;pointer-events:none;border-radius:var(--scl-radius-8);height:var(--scl-spacing-24);background-color:var(--scl-color-background-standard, #ffffff)}.input--disabled .input__textarea-label-safety-background{background-color:transparent}.input--disabled label,.input--disabled .input__label,.input--disabled input,.input--disabled .input__input,.input--disabled .input__checkbox-container,.input--disabled .input__radio,.input--disabled .input__select,.input--disabled .input__textarea,.input--disabled .input__helper-text{cursor:not-allowed;border-color:var(--scl-color-background-disabled);color:var(--scl-color-background-disabled);background:var(--scl-color-white)}.input--disabled .input__select-wrapper{--icon-color:var(--scl-color-background-disabled)}.input--disabled.animated label.input__label{color:var(--scl-color-background-disabled)}\";\nvar i = 0;\nvar SELECT_ICON = 'M20.65 7.4c-.3-.3-.75-.3-1.05 0L12 15 4.4 7.4c-.3-.3-.75-.3-1.05 0s-.3.75 0 1.05L12 17.1l8.65-8.65c.3-.25.3-.75 0-1.05z';\n\nvar Input = /*#__PURE__*/function () {\n  function Input(hostRef) {\n    var _this = this;\n\n    _classCallCheck(this, Input);\n\n    registerInstance(this, hostRef);\n    this.scaleInput = createEvent(this, \"scale-input\", 7);\n    this.scaleInputLegacy = createEvent(this, \"scaleInput\", 7);\n    this.scaleChange = createEvent(this, \"scale-change\", 7);\n    this.scaleChangeLegacy = createEvent(this, \"scaleChange\", 7);\n    this.scaleFocus = createEvent(this, \"scale-focus\", 7);\n    this.scaleFocusLegacy = createEvent(this, \"scaleFocus\", 7);\n    this.scaleBlur = createEvent(this, \"scale-blur\", 7);\n    this.scaleBlurLegacy = createEvent(this, \"scaleBlur\", 7);\n    this.scaleKeyDown = createEvent(this, \"scale-keydown\", 7);\n    this.scaleKeyDownLegacy = createEvent(this, \"scaleKeyDown\", 7);\n    /** (optional) Input type */\n\n    this.type = 'text';\n    /** (optional) Input name */\n\n    this.name = '';\n    /** (optional) Input label variant */\n\n    this.variant = 'static';\n    /** (optional) Input label */\n\n    this.label = '';\n    /** (optional) Input size */\n\n    this.size = '';\n    /** (optional) Input helper text */\n\n    this.helperText = '';\n    /** @deprecated - invalid should replace status */\n\n    this.status = '';\n    /** (optional) Input status */\n\n    this.invalid = false;\n    /** (optional) Input placeHolder */\n\n    this.placeholder = '';\n    /** (optional) Active switch */\n\n    this.checked = false;\n    /** (optional) Input value */\n\n    this.value = '';\n    /** (optional) Makes type `select` behave as a controlled component in React */\n\n    this.controlled = false;\n    /** Whether the input element has focus */\n\n    this.hasFocus = false; // Handle checkbox/radio change (click on label)\n\n    this.handleCheckChange = function (event) {\n      _this.checked = event.target.checked;\n    }; // Handle click on checkbox visual element\n\n\n    this.handleCheckboxClick = function () {\n      if (!_this.disabled) {\n        _this.checked = !_this.checked;\n      }\n    }; // Handle change on <select> independently\n    // so we can allow \"controlled\" (React) behavior,\n    // in which only the `value` changing does update\n    // the actual <select> value, not the user's input.\n\n\n    this.handleSelectChange = function (event) {\n      var target = event.target;\n\n      if (_this.controlled) {\n        emitEvent(_this, 'scaleChange', {\n          value: target.value\n        });\n        _this.selectElement.value = String(_this.value);\n        _this.forceUpdate = String(Date.now());\n      } else {\n        _this.value = target.value || '';\n\n        _this.emitChange();\n      }\n    };\n\n    this.handleInput = function (event) {\n      var target = event.target;\n\n      if (target) {\n        _this.value = target.value || '';\n\n        _this.emitChange();\n      }\n\n      emitEvent(_this, 'scaleInput', event);\n    };\n\n    this.handleChange = function (event) {\n      var target = event.target;\n\n      if (target) {\n        _this.value = target.value || '';\n\n        _this.emitChange();\n      }\n    };\n\n    this.handleFocus = function () {\n      emitEvent(_this, 'scaleFocus');\n      _this.hasFocus = true;\n    };\n\n    this.handleBlur = function () {\n      emitEvent(_this, 'scaleBlur');\n      _this.hasFocus = false;\n    };\n\n    this.handleKeyDown = function (event) {\n      emitEvent(_this, 'scaleKeyDown', event);\n    };\n  }\n\n  _createClass(Input, [{\n    key: \"componentWillLoad\",\n    value: function componentWillLoad() {\n      if (this.inputId == null) {\n        this.inputId = 'input-' + i++;\n      } // Default icon for `select` type\n\n\n      if (this.type === 'select' && this.icon == null) {\n        this.icon = SELECT_ICON;\n      }\n    }\n  }, {\n    key: \"componentDidLoad\",\n    value: function componentDidLoad() {\n      var _this2 = this;\n\n      // tslint:disable-next-line:no-console\n      statusNote({\n        tag: 'deprecated',\n        source: this.el,\n        type: 'warn',\n        extraMessage: \"Please use <\".concat({\n          select: 'scale-dropdown',\n          checkbox: 'scale-checkbox',\n          radio: 'scale-radio-button',\n          textarea: 'scale-textarea'\n        }[this.type] || 'scale-text-field', \"> instead.\")\n      }); // Keep this.value up-to-date for type=\"select\".\n      // This is important also for React, where `value` is used to control the element state.\n\n      if (this.type === 'select') {\n        var select = this.selectElement;\n        var selectedValue = select.selectedIndex > -1 ? select.options[select.selectedIndex].value : null; // If we have a `value` passed, set it on the <select> element\n        // Otherwise, if we have an <option selected>, set its value on `value`\n\n        if (this.value) {\n          select.value = String(this.value);\n        } else if (selectedValue) {\n          this.value = selectedValue;\n        }\n      } // This is a workaroud to prevent a bug in Stencil:\n      // when using slots without Shadow DOM (possible only with Stencil)\n      // sometimes an update in the Light DOM does not trigger a re-render\n      // thus causing unexpected results.\n      // https://gitlab.com/scale-ds/scale-telekom/-/issues/16\n\n\n      if (this.type === 'select' && this.selectElement) {\n        this.mutationObserver = new MutationObserver(function () {\n          _this2.forceUpdate = String(Date.now());\n        });\n        this.mutationObserver.observe(this.el, {\n          childList: true,\n          subtree: true\n        });\n      }\n    }\n  }, {\n    key: \"componentWillUpdate\",\n    value: function componentWillUpdate() {}\n  }, {\n    key: \"componentDidRender\",\n    value: function componentDidRender() {\n      // When type `select` and `controlled` is true,\n      // make sure the <select> is always in sync with the value.\n      var value = this.value == null ? '' : this.value.toString();\n\n      if (this.type === 'select' && this.controlled && this.selectElement.value.toString() !== value) {\n        this.selectElement.value = value;\n      }\n\n      if (this.status !== '') {\n        statusNote({\n          tag: 'deprecated',\n          message: 'Property \"status\" is deprecated. Please use the \"invalid\" property!',\n          type: 'warn',\n          source: this.el\n        });\n      }\n    }\n  }, {\n    key: \"disconnectedCallback\",\n    value: function disconnectedCallback() {\n      if (this.mutationObserver) {\n        this.mutationObserver.disconnect();\n      }\n    } // We're not watching `value` like we used to\n    // because we get unwanted `scaleChange` events\n    // because how we keep this.value up-to-date for type=\"select\"\n    // `this.value = selectedValue`\n\n  }, {\n    key: \"emitChange\",\n    value: function emitChange() {\n      emitEvent(this, 'scaleChange', {\n        value: this.value == null ? this.value : this.value.toString()\n      });\n    }\n  }, {\n    key: \"checkedChanged\",\n    value: function checkedChanged() {\n      emitEvent(this, 'scaleChange', {\n        value: this.checked\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var Tag = this.type === 'textarea' ? 'textarea' : 'input';\n      var ariaInvalidAttr = this.status === 'error' || this.invalid ? {\n        'aria-invalid': true\n      } : {};\n      var helperTextId = \"helper-message-\".concat(i);\n      var ariaDescribedByAttr = {\n        'aria-describedBy': helperTextId\n      };\n\n      if (this.type === 'checkbox') {\n        return h(Host, {\n          checked: this.checked\n        }, h(\"div\", {\n          class: this.getCssClassMap()\n        }, h(\"input\", Object.assign({\n          type: \"checkbox\",\n          name: this.name,\n          id: this.inputId,\n          onChange: this.handleCheckChange,\n          value: this.value,\n          checked: this.checked,\n          disabled: this.disabled\n        }, ariaInvalidAttr, ariaDescribedByAttr)), h(\"div\", {\n          class: classnames('input__checkbox-container'),\n          onClick: this.handleCheckboxClick\n        }, h(\"span\", {\n          class: classnames('input__checkbox-placeholder')\n        }), !!this.icon && this.checked && h(\"scale-icon\", {\n          path: this.icon,\n          size: 12\n        })), h(\"label\", {\n          htmlFor: this.inputId\n        }, this.label), !!this.helperText && h(\"div\", {\n          class: \"input__meta\",\n          id: helperTextId,\n          \"aria-live\": \"polite\",\n          \"aria-relevant\": \"additions removals\"\n        }, h(\"div\", {\n          class: \"input__helper-text\"\n        }, this.helperText))));\n      }\n\n      if (this.type === 'radio') {\n        return h(Host, null, h(\"div\", {\n          class: this.getCssClassMap()\n        }, h(\"input\", Object.assign({\n          type: \"radio\",\n          name: this.name,\n          id: this.inputId,\n          onChange: this.handleCheckChange,\n          value: this.value,\n          checked: this.checked,\n          disabled: this.disabled\n        }, ariaInvalidAttr, ariaDescribedByAttr)), h(\"label\", {\n          htmlFor: this.inputId\n        }, this.label), !!this.helperText && h(\"div\", {\n          class: \"input__meta\",\n          id: helperTextId,\n          \"aria-live\": \"polite\",\n          \"aria-relevant\": \"additions removals\"\n        }, h(\"div\", {\n          class: \"input__helper-text\"\n        }, this.helperText))));\n      }\n\n      return h(Host, null, h(\"div\", {\n        class: this.getCssClassMap()\n      }, h(\"label\", {\n        class: \"input__label\",\n        htmlFor: this.inputId\n      }, this.label), this.type === 'select' ? h(\"div\", {\n        class: \"input__select-wrapper\"\n      }, h(\"select\", Object.assign({\n        ref: function ref(el) {\n          return _this3.selectElement = el;\n        },\n        class: classnames('input__select'),\n        // @ts-ignore\n        value: this.value,\n        onChange: this.handleSelectChange,\n        onFocus: this.handleFocus,\n        onBlur: this.handleBlur,\n        onKeyDown: this.handleKeyDown,\n        disabled: this.disabled,\n        required: this.required,\n        multiple: this.multiple,\n        id: this.inputId,\n        name: this.name,\n        size: this.visibleSize\n      }, ariaInvalidAttr, ariaDescribedByAttr), h(\"slot\", null)), !!this.icon && h(\"scale-icon\", {\n        path: this.icon\n      })) : h(Tag, Object.assign({\n        type: this.type,\n        class: classnames(\"input__\".concat(this.type === 'textarea' ? 'textarea' : 'input'), this.customResize && this.customResize.id),\n        style: !!this.resize && {\n          resize: this.resize\n        },\n        value: this.value\n      }, !!this.name ? {\n        name: this.name\n      } : {}, {\n        required: this.required,\n        minLength: this.minLength,\n        maxLength: this.maxLength,\n        id: this.inputId,\n        onInput: this.handleInput,\n        onChange: this.handleChange,\n        onFocus: this.handleFocus,\n        onBlur: this.handleBlur,\n        onKeyDown: this.handleKeyDown\n      }, !!this.placeholder ? {\n        placeholder: this.placeholder\n      } : {}, {\n        disabled: this.disabled\n      }, !!this.rows ? {\n        rows: this.rows\n      } : {}, !!this.cols ? {\n        cols: this.cols\n      } : {}, ariaInvalidAttr, ariaDescribedByAttr)), this.type === 'textarea' && this.variant === 'animated' && h(\"span\", {\n        class: \"input__textarea-label-safety-background\",\n        \"aria-hidden\": \"true\"\n      }), (!!this.helperText || !!this.counter) && h(\"div\", {\n        class: \"input__meta\",\n        id: helperTextId,\n        \"aria-live\": \"polite\",\n        \"aria-relevant\": \"additions removals\"\n      }, !!this.helperText && h(\"div\", {\n        class: \"input__helper-text\"\n      }, this.helperText), this.counter && h(\"div\", {\n        class: \"input__counter\"\n      }, !!this.value ? String(this.value).length : 0, \" /\", ' ', this.maxLength))));\n    }\n  }, {\n    key: \"getCssClassMap\",\n    value: function getCssClassMap() {\n      return classnames('input', this.type && \"input--type-\".concat(this.type), this.hasFocus && 'input--has-focus', this.checked && \"input--checked\", this.resize && \"input--resize-\".concat(this.resize), this.variant && \"input--variant-\".concat(this.variant), this.disabled && \"input--disabled\", this.transparent && 'input--transparent', this.status && \"input--status-\".concat(this.status), this.invalid && \"input--status-error\", this.size && \"input--size-\".concat(this.size), this.value != null && this.value !== '' && 'animated');\n    }\n  }, {\n    key: \"el\",\n    get: function get() {\n      return getElement(this);\n    }\n  }], [{\n    key: \"watchers\",\n    get: function get() {\n      return {\n        \"checked\": [\"checkedChanged\"]\n      };\n    }\n  }]);\n\n  return Input;\n}();\n\nInput.style = inputCss;\nexport { Input as scale_input };","map":null,"metadata":{},"sourceType":"module"}