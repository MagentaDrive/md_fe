{"ast":null,"code":"/**\n * @license\n * Scale https://github.com/telekom/scale\n *\n * Copyright (c) 2021 Egor Kirpichev and contributors, Deutsche Telekom AG\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at https://mozilla.org/MPL/2.0/.\n */\nvar hasShadowDom = function hasShadowDom(el) {\n  return !!el.shadowRoot && !!el.attachShadow;\n}; // eg isPseudoClassSupported(':focus-visible') // true for chrome, false for safari\n\n\nvar isPseudoClassSupported = function isPseudoClassSupported(pseudoClass) {\n  // Get the document stylesheet1\n  var ss = document.styleSheets[0]; // Create a stylesheet if one doesn't exist\n\n  if (!ss) {\n    var el = document.createElement('style');\n    document.head.appendChild(el);\n    ss = document.styleSheets[0];\n    document.head.removeChild(el);\n  } // Test the pseudo-class by trying to style with it\n\n\n  function testPseudo() {\n    try {\n      if (!/^:/.test(pseudoClass)) {\n        pseudoClass = ':' + pseudoClass;\n      }\n\n      ss.insertRule('html' + pseudoClass + '{}', 0);\n      ss.deleteRule(0);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  } // Run the test\n\n\n  return testPseudo();\n};\n/**\n * Call `emit` on component events twice.\n * One for the legacy camel-cased event, one for the new kebab-cased.\n * e.g. for the event `scaleChange` it will do `instance.scaleChange.emit()` and `instance.scaleChangeLegacy.emit()`.\n * It expects both `scaleChange` and `scaleChangeLegacy` event-decorated properties to exist on the component.\n *\n * @param instance {ComponentInterface} - The component instance, aka `this`\n * @param eventKey {string} - The event property, e.g. `scaleChange`\n * @param detail {any} - The custom event `detail`\n * @returns {CustomEvent[]} - The events emitted\n */\n\n\nfunction emitEvent(instance, eventKey, detail) {\n  var legacyKey = eventKey + 'Legacy';\n  var emitted = [];\n\n  if (typeof instance[legacyKey] !== 'undefined') {\n    // Emit legacy camel case event, e.g. `scaleClose`\n    emitted.push(instance[legacyKey].emit(detail));\n  } // Emit now-standard kebab-case event, e.g. `scale-close`\n\n\n  emitted.push(instance[eventKey].emit(detail)); // Return both\n\n  return emitted;\n}\n\nfunction isClickOutside(event, host) {\n  var target = event.target;\n  var hasShadow = target.shadowRoot != null;\n  var composedPath = hasShadow ? event.composedPath() : [];\n\n  do {\n    if (target === host) {\n      return false;\n    }\n\n    if (hasShadow) {\n      // @ts-ignore\n      target = composedPath.shift();\n    } else {\n      target = target.parentNode;\n    }\n  } while (target);\n\n  return true;\n}\n\nvar isScaleIcon = function isScaleIcon(el) {\n  if (el == null) {\n    return false;\n  }\n\n  return el.nodeName.toUpperCase().substring(0, 10) === 'SCALE-ICON';\n};\n\nexport { isPseudoClassSupported as a, isClickOutside as b, emitEvent as e, hasShadowDom as h, isScaleIcon as i };","map":null,"metadata":{},"sourceType":"module"}