{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Thomas\\\\Desktop\\\\md_fe\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"C:\\\\Users\\\\Thomas\\\\Desktop\\\\md_fe\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport { r as registerInstance, c as createEvent, h, a as Host, g as getElement } from './index-f2e5998d.js';\nimport { c as classnames } from './index-713f92a5.js';\nimport { e as emitEvent } from './utils-524c237e.js';\nimport { s as statusNote } from './status-note-d227f142.js';\nvar radioButtonCss = \"scale-radio-button{--color-disabled:var(--scl-color-background-disabled);--background-disabled:var(--scl-color-white);--color-error:var(--scl-color-text-error);--transition:all var(--scl-motion-duration-fast)\\n    var(--scl-motion-easing-standard);--color-primary:var(--scl-color-primary, #e20074);--color-primary-hover:var(--scl-color-primary-hover, #f90984);--color-primary-active:var(--scl-color-primary-active);--color-focus:var(--scl-color-focus);--color-text:var(--scl-color-text-standard);--transition-helper-text:var(--transition);--font-size-helper-text:var(--scl-font-size-12);--font-weight-helper-text:var(--scl-font-weight-bold);--line-height-helper-text:var(--scl-font-line-height-133);--color-helper-text:var(--scl-color-blue-70);--spacing-left-helper-text:var(--scl-spacing-24);--spacing-top-helper-text:var(--scl-spacing-4);--transition-label:var(--transition);--font-weight-label:var(--scl-font-weight-medium);--color-label:var(--color-text);--width-control:var(--scl-spacing-16);--height-control:var(--scl-spacing-16);--transition-control:var(--transition);--spacing-control:0 var(--scl-spacing-8) 0 0;--background-color-control:var(--scl-color-white);--border-control:var(--scl-spacing-1) solid var(--color-text);--border-control-checked:calc(0.5 * var(--scl-spacing-12)) solid\\n    var(--color-primary);--border-control-checked-active:calc(0.5 * var(--scl-spacing-12)) solid\\n    var(--color-primary-active, #cb0068);--border-control-checked-disabled:calc(0.5 * var(--scl-spacing-12)) solid\\n    var(--color-disabled);--background-control-checked-disabled:var(--scl-color-grey-30);--border-control-active:var(--scl-spacing-8) solid\\n    var(--color-primary-active);--border-control-disabled:var(--scl-spacing-1) solid var(--color-disabled);--border-control-error:var(--scl-spacing-2) solid\\n    var(--scl-color-background-error);--box-shadow-control-focus:0 0 0 var(--scl-spacing-2) var(--color-focus)}.radio-button{position:relative;display:flex;flex-wrap:wrap;align-items:center;cursor:pointer;width:fit-content}.radio-button .radio-button__meta{width:100%;display:flex;justify-content:space-between}.radio-button .radio-button__helper-text{transition:var(--transition-helper-text);font-size:var(--font-size-helper-text);font-weight:var(--font-weight-helper-text);line-height:var(--line-height-helper-text);color:var(--color-helper-text);margin-top:var(--spacing-top-helper-text);padding-left:var(--spacing-left-helper-text)}.radio-button--status-error .radio-button__helper-text{color:var(--color-error)}.radio-button label{color:var(--color-label);transition:var(--transition-label);font-weight:var(--font-weight-label);cursor:pointer}.radio-button input{width:var(--width-control);height:var(--height-control);transition:var(--transition-control);border-radius:50%;-webkit-appearance:none;background-color:var(--background-color-control);border:var(--border-control);margin:var(--spacing-control);cursor:pointer}.radio-button input:focus{outline:none;box-shadow:var(--box-shadow-control-focus)}.radio-button:hover input:not(:checked):not([disabled]){box-shadow:none;border-color:var(--color-primary-hover)}.radio-button:hover input:not(:checked):not([disabled])~label{color:var(--color-primary-hover)}.radio-button input:active{border:var(--border-control-active)}.radio-button input:not(:checked):not([disabled]):active~label{color:var(--color-primary-active)}.radio-button input:disabled{border:var(--border-control-disabled)}.radio-button input:disabled~label{color:var(--color-disabled)}.radio-button.radio-button--status-error input{border:var(--border-control-error)}.radio-button input:checked{border:var(--border-control-checked)}.radio-button input:checked:active{border:var(--border-control-checked-active)}.radio-button input:checked:disabled{background:var(--background-control-checked-disabled);border:var(--border-control-checked-disabled)}.radio-button input:checked:disabled~label{color:var(--color-disabled)}.radio-button--disabled label,.radio-button--disabled .radio-button__label,.radio-button--disabled input,.radio-button--disabled .radio-button__helper-text{cursor:not-allowed;border-color:var(--color-disabled);color:var(--color-disabled);background:var(--scl-color-white)}\";\nvar i = 0;\n\nvar RadioButton = /*#__PURE__*/function () {\n  function RadioButton(hostRef) {\n    var _this = this;\n\n    _classCallCheck(this, RadioButton);\n\n    registerInstance(this, hostRef);\n    this.scaleChange = createEvent(this, \"scale-change\", 7);\n    this.scaleChangeLegacy = createEvent(this, \"scaleChange\", 7);\n    /** (optional) Input name */\n\n    this.name = '';\n    /** (optional) Input label */\n\n    this.label = '';\n    /** (optional) Input helper text */\n\n    this.helperText = '';\n    /** @deprecated - invalid should replace status */\n\n    this.status = '';\n    /** (optional) Input status */\n\n    this.invalid = false;\n    /** (optional) Input checked */\n\n    this.checked = false;\n    /** (optional) Input value */\n\n    this.value = '';\n\n    this.handleCheckedChange = function (event) {\n      _this.checked = event.target.checked; // I don't think this is ever going to be `false` but well...\n\n      if (_this.checked) {\n        _this.uncheckSiblings();\n      }\n\n      emitEvent(_this, 'scaleChange', {\n        value: _this.value == null ? _this.value : _this.value.toString()\n      });\n    }; // Prevent click event being fired twice when the target is the label.\n\n\n    this.handleLabelClick = function (event) {\n      event.stopPropagation();\n    };\n  }\n\n  _createClass(RadioButton, [{\n    key: \"componentWillLoad\",\n    value: function componentWillLoad() {\n      if (this.inputId == null) {\n        this.inputId = 'input-' + i++;\n      }\n    }\n  }, {\n    key: \"componentDidRender\",\n    value: function componentDidRender() {\n      if (this.status !== '') {\n        statusNote({\n          tag: 'deprecated',\n          message: 'Property \"status\" is deprecated. Please use the \"invalid\" property!',\n          type: 'warn',\n          source: this.hostElement\n        });\n      }\n    } // We manually set `checked` to false on sibling <scale-radio-button> elements,\n    // otherwise they stayed `checked` after being clicked once, forever.\n\n  }, {\n    key: \"uncheckSiblings\",\n    value: function uncheckSiblings() {\n      this.getSiblingRadios().forEach(function (radio) {\n        radio.checked = false;\n      });\n    }\n  }, {\n    key: \"getSiblingRadios\",\n    value: function getSiblingRadios() {\n      var _this2 = this;\n\n      return Array.from(document.querySelectorAll(\"scale-radio-button[name=\\\"\".concat(this.name, \"\\\"]\"))).filter(function (radio) {\n        return radio.inputId !== _this2.inputId;\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var ariaInvalidAttr = this.status === 'error' || this.invalid ? {\n        'aria-invalid': true\n      } : {};\n      var helperTextId = \"helper-message-\".concat(i);\n      var ariaDescribedByAttr = {\n        'aria-describedBy': helperTextId\n      };\n      return h(Host, null, h(\"div\", {\n        class: this.getCssClassMap()\n      }, h(\"input\", Object.assign({\n        type: \"radio\",\n        name: this.name,\n        id: this.inputId,\n        onChange: this.handleCheckedChange,\n        value: this.value,\n        checked: this.checked,\n        disabled: this.disabled\n      }, ariaInvalidAttr, this.helperText ? ariaDescribedByAttr : {})), h(\"label\", {\n        htmlFor: this.inputId,\n        onClick: this.handleLabelClick\n      }, this.label), !!this.helperText && h(\"div\", {\n        class: \"radio-button__meta\",\n        id: helperTextId,\n        \"aria-live\": \"polite\",\n        \"aria-relevant\": \"additions removals\"\n      }, h(\"div\", {\n        class: \"radio-button__helper-text\"\n      }, this.helperText))));\n    }\n  }, {\n    key: \"getCssClassMap\",\n    value: function getCssClassMap() {\n      return classnames('radio-button', this.checked && \"radio-button--checked\", this.disabled && \"radio-button--disabled\", this.status && \"radio-button--status-\".concat(this.status), this.invalid && \"radio-button--status-error\");\n    }\n  }, {\n    key: \"hostElement\",\n    get: function get() {\n      return getElement(this);\n    }\n  }]);\n\n  return RadioButton;\n}();\n\nRadioButton.style = radioButtonCss;\nexport { RadioButton as scale_radio_button };","map":null,"metadata":{},"sourceType":"module"}