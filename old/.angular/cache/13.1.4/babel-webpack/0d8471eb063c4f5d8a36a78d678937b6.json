{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Thomas\\\\Desktop\\\\md_fe\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"C:\\\\Users\\\\Thomas\\\\Desktop\\\\md_fe\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport { r as registerInstance, c as createEvent, h, a as Host, g as getElement } from './index-f2e5998d.js';\nimport { c as classnames } from './index-713f92a5.js';\nimport { e as emitEvent } from './utils-524c237e.js';\nvar toggleButtonCss = \":host{--width:auto;--spacing-x:var(--scl-spacing-24);--spacing-x-icon-only:var(--scl-spacing-8);--min-height:var(--scl-spacing-24);--height-xs:var(--scl-spacing-24);--height-small:var(--scl-spacing-32);--height-regular:var(--scl-spacing-40);--height-large:var(--scl-spacing-48);--radius:var(--scl-radius-4);--transition:all var(--scl-motion-duration-fast)\\n      var(--scl-motion-easing-standard),\\n    border-radius 0ms;--box-shadow-focus:inset 0 0 0 var(--scl-spacing-2) var(--scl-color-focus);--font-weight:var(--scl-font-weight-bold);--font-size-large:var(--scl-font-size-16);--font-size-small:var(--scl-font-size-14);--font-size-xs:var(--scl-font-size-12);--line-height:var(--scl-font-line-height-150);--spacing-icon-x:var(--scl-spacing-8);--vertical-align:middle;--border-color:var(--scl-color-grey-90);--border-color-disabled:var(--scl-color-background-disabled);--font-size-small:var(--scl-font-size-12);--line-height-small:var(--scl-font-line-height-133);--min-height-small:var(--scl-spacing-32);--radius-primary:var(--radius);--background-primary:var(--scl-color-grey-10);--background-primary-disabled:var(--scl-color-grey-0);--color-primary:var(--scl-color-grey-90);--color-primary-hover:var(--scl-color-primary-hover);--color-primary-active:var(--scl-color-primary-active);--color-primary-disabled:var(--scl-color-grey-20);--background-secondary:var(--scl-color-white);--color-selected:var(--scl-color-white);--background-selected-light:var(--scl-color-primary);--background-selected-hover-light:var(--color-primary-hover);--background-selected-active-light:var(--scl-color-primary-active);--background-selected-dark:var(--scl-color-grey-90);--background-selected-hover-dark:var(--scl-color-grey-70);--background-selected-active-dark:var(--scl-color-grey-90);--color-high-contrast:var(--scl-color-white)}.toggle-button{box-sizing:border-box;display:inline-flex;align-items:center;position:relative;border:0;outline:none;cursor:pointer;user-select:none;font-family:inherit;word-spacing:inherit;letter-spacing:inherit;justify-content:center;text-decoration:none;font-weight:var(--font-weight);font-size:var(--font-size);line-height:var(--line-height);min-height:var(--min-height);width:var(--width);padding-left:var(--spacing-x);padding-right:var(--spacing-x);vertical-align:var(--vertical-align);transition:var(--transition);margin:0}.toggle-button--primary{background:var(--background-primary)}.toggle-button--secondary{background:var(--background-secondary)}.toggle-button--icon-before ::slotted(*){margin-right:var(--spacing-icon-x);pointer-events:none}.toggle-button--icon-after ::slotted(*){margin-left:var(--spacing-icon-x);pointer-events:none}.toggle-button--icon-only ::slotted(*){pointer-events:none}.toggle-button--xs{height:var(--height-xs);font-size:var(--font-size-xs)}.toggle-button--small{height:var(--height-small);font-size:var(--font-size-small)}.toggle-button--regular{height:var(--height-regular);font-size:var(--font-size-large)}.toggle-button--large{height:var(--height-large);font-size:var(--font-size-large)}.toggle-button:not(.button--disabled):focus{box-shadow:var(--box-shadow-focus)}.toggle-button:not(.button--disabled):hover{color:var(--color-primary-hover)}.toggle-button:not(.button--disabled):active{color:var(--scl-color-primary-active)}.toggle-button:disabled{color:var(--color-primary-disabled);pointer-events:none;border:1px solid var(--border-color-disabled)}.toggle-button:disabled.toggle-button--primary{background:var(--background-primary-disabled)}.toggle-button--selected.toggle-button--color{color:var(--color-selected);background:var(--background-selected-light)}.toggle-button--selected:not(.button--disabled).toggle-button--color:hover{color:var(--color-selected);background:var(--background-selected-hover-light)}.toggle-button--selected:not(.button--disabled).toggle-button--color:active{color:var(--color-selected);background:var(--background-selected-active-light)}.toggle-button--selected.toggle-button--monochrome{color:var(--color-selected);background:var(--background-selected-dark)}.toggle-button--selected:not(.button--disabled).toggle-button--monochrome:hover{color:var(--color-selected);background:var(--background-selected-hover-dark)}.toggle-button--selected:not(.button--disabled).toggle-button--monochrome:active{color:var(--color-selected);background:var(--background-selected-active-dark)}.toggle-button--border{border:1px solid var(--border-color)}.toggle-button--left,.toggle-button--left:disabled{border-right:0;border-radius:var(--radius-primary) 0 0 var(--radius-primary)}.toggle-button--right,.toggle-button--right:disabled{border-left:0;border-radius:0 var(--radius-primary) var(--radius-primary) 0}.toggle-button--both,.toggle-button--both:disabled{border-radius:var(--radius-primary)}.toggle-button--all,.toggle-button--all:disabled{border-radius:var(--radius-primary)}.toggle-button--neither,.toggle-button--neither:disabled{border-right:0;border-left:0;border-radius:0}@media screen and (forced-colors: active), (-ms-high-contrast: active){.toggle-button{color:var(--color-high-contrast)}}\";\nvar iconSizes = /*#__PURE__*/(function () {\n  (function (iconSizes) {\n    iconSizes[\"xs\"] = \"12\";\n    iconSizes[\"small\"] = \"16\";\n    iconSizes[\"regular\"] = \"22\";\n    iconSizes[\"large\"] = \"24\";\n  })(iconSizes || (iconSizes = {}));\n\n  return iconSizes;\n})();\nvar i = 0;\n\nvar ToggleButton = /*#__PURE__*/function () {\n  function ToggleButton(hostRef) {\n    var _this = this;\n\n    _classCallCheck(this, ToggleButton);\n\n    registerInstance(this, hostRef);\n    this.scaleClick = createEvent(this, \"scale-click\", 7);\n    this.scaleClickLegacy = createEvent(this, \"scaleClick\", 7);\n    /** (optional) The size of the button */\n\n    this.size = 'regular';\n    /** (optional) Button background */\n\n    this.background = 'white';\n    /** @deprecated - variant should replace colorScheme */\n\n    this.colorScheme = 'color';\n    /** (optional) background variant of a selected toggle-button */\n\n    this.variant = 'color';\n    /** (optional) If `true`, the button is disabled */\n\n    this.disabled = false;\n    /** (optional) If `true`, the button is selected */\n\n    this.selected = false;\n    /** (optional) Button type */\n\n    this.iconOnly = false;\n    /** (optional) Icon position related to the label */\n\n    this.iconPosition = 'before';\n    /** (optional) set the border-radius left, right or both */\n\n    this.radius = null;\n    /** (optional) translation of 'selected */\n\n    this.ariaLangSelected = 'selected';\n    /** (optional) translation of 'deselected */\n\n    this.ariaLangDeselected = 'deselected';\n    /** a11y text for getting meaningful value. `$buttonNumber` and `$selected` are template variables and will be replaces by their corresponding properties.  */\n\n    this.ariaDescriptionTranslation = '$selected';\n    this.hasScaleIcon = false;\n\n    this.handleClick = function (event) {\n      event.preventDefault();\n      _this.selected = !_this.selected;\n\n      _this.handleIconShape();\n\n      _this.scaleClick.emit({\n        id: _this.toggleButtonId,\n        selected: _this.selected\n      });\n\n      emitEvent(_this, 'scaleClick', {\n        id: _this.toggleButtonId,\n        selected: _this.selected\n      });\n    };\n\n    this.handleIconShape = function () {\n      if (_this.hasScaleIcon) {\n        Array.from(_this.hostElement.children).forEach(function (node) {\n          if (node.nodeName.substr(0, 10) === 'SCALE-ICON') {\n            if (_this.selected) {\n              node.setAttribute('selected', 'true');\n            } else {\n              node.removeAttribute('selected');\n            }\n          }\n        });\n      }\n    };\n  }\n\n  _createClass(ToggleButton, [{\n    key: \"connectedCallback\",\n    value: function connectedCallback() {\n      this.setIconPositionProp();\n      this.handleIconShape();\n    }\n  }, {\n    key: \"componentDidLoad\",\n    value: function componentDidLoad() {\n      this.handleIconSize();\n    }\n  }, {\n    key: \"componentDidRender\",\n    value: function componentDidRender() {\n      this.handleIconSize();\n    }\n  }, {\n    key: \"componentWillLoad\",\n    value: function componentWillLoad() {\n      if (this.toggleButtonId == null) {\n        this.toggleButtonId = 'toggle-button-' + i++;\n      }\n    }\n  }, {\n    key: \"getAriaDescriptionTranslation\",\n    value: function getAriaDescriptionTranslation() {\n      var replaceSelected = this.selected ? this.ariaLangSelected : this.ariaLangDeselected;\n      var filledText = this.ariaDescriptionTranslation.replace(/\\$position/g, \"\".concat(this.position)).replace(/\\$selected/g, \"\".concat(replaceSelected));\n      return filledText;\n    }\n  }, {\n    key: \"handleIconSize\",\n    value: function handleIconSize() {\n      var _this2 = this;\n\n      Array.from(this.hostElement.children).forEach(function (child) {\n        if (child.tagName.substr(0, 10) === 'SCALE-ICON') {\n          child.setAttribute('size', iconSizes[_this2.size]);\n        }\n      });\n    }\n    /**\n     * Detect whether a child node is a scale icon and contains text.\n     * If so, we set `iconPosition` to `after`, if the icon comes after the text.\n     */\n\n  }, {\n    key: \"setIconPositionProp\",\n    value: function setIconPositionProp() {\n      var _this3 = this;\n\n      var nodes = Array.from(this.hostElement.childNodes).filter(function (node) {\n        if (node.nodeName.substr(0, 10) === 'SCALE-ICON') {\n          _this3.hasScaleIcon = true;\n        } // ignore empty text nodes, which are probably due to formatting\n\n\n        return !(node.nodeType === 3 && node.nodeValue.trim() === '');\n      });\n\n      if (!this.iconOnly && nodes && nodes.length && nodes[nodes.length - 1] && nodes[nodes.length - 1].nodeName.substr(0, 10) === 'SCALE-ICON') {\n        this.iconPosition = 'after';\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return h(Host, null, this.styles && h(\"style\", null, this.styles), h(\"button\", {\n        class: this.getCssClassMap(),\n        id: this.toggleButtonId,\n        onClick: this.handleClick,\n        disabled: this.disabled,\n        type: \"button\",\n        \"aria-label\": this.ariaLabel,\n        \"aria-pressed\": this.selected,\n        part: this.getBasePartMap(),\n        \"aria-description\": this.getAriaDescriptionTranslation()\n      }, h(\"slot\", null)));\n    }\n  }, {\n    key: \"getBasePartMap\",\n    value: function getBasePartMap() {\n      return this.getCssOrBasePartMap('basePart');\n    }\n  }, {\n    key: \"getCssClassMap\",\n    value: function getCssClassMap() {\n      return this.getCssOrBasePartMap('css');\n    }\n  }, {\n    key: \"getCssOrBasePartMap\",\n    value: function getCssOrBasePartMap(mode) {\n      var prefix = mode === 'basePart' ? '' : 'toggle-button--';\n      return classnames('toggle-button', this.size && \"\".concat(prefix).concat(this.size), this.background && \"\".concat(prefix).concat(this.background === 'grey' ? 'primary' : 'secondary'), !this.iconOnly && this.iconPosition && \"toggle-button--icon-\".concat(this.iconPosition), this.iconOnly && \"\".concat(prefix, \"icon-only\"), !this.disabled && this.selected && \"\".concat(prefix, \"selected\"), this.radius && \"\".concat(prefix).concat(this.radius), this.colorScheme && \"\".concat(prefix).concat(this.colorScheme), this.variant && \"\".concat(prefix).concat(this.variant), !this.hideBorder && \"\".concat(prefix, \"border\"));\n    }\n  }, {\n    key: \"hostElement\",\n    get: function get() {\n      return getElement(this);\n    }\n  }]);\n\n  return ToggleButton;\n}();\n\nToggleButton.style = toggleButtonCss;\nexport { ToggleButton as scale_toggle_button };","map":null,"metadata":{},"sourceType":"module"}