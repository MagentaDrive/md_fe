{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Thomas\\\\Desktop\\\\md_fe\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"C:\\\\Users\\\\Thomas\\\\Desktop\\\\md_fe\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport { r as registerInstance, c as createEvent, h, a as Host, g as getElement } from './index-f2e5998d.js';\nimport { c as classnames } from './index-713f92a5.js';\nimport { e as emitEvent } from './utils-524c237e.js';\nimport { s as statusNote } from './status-note-d227f142.js';\nvar toggleGroupCss = \":host{--border-color:var(--scl-color-grey-90);--border-color-disabled:var(--scl-color-background-disabled);--border:var(--scl-spacing-1) solid var(--border-color);--border-disabled:var(--scl-spacing-1) solid var(--border-color-disabled);--radius:var(--scl-radius-8)}.toggle-group--inline{display:inline-flex}.toggle-group--block{display:flex}.toggle-group--block ::slotted(*){flex-grow:1}\";\n\nvar ToggleGroup = /*#__PURE__*/function () {\n  function ToggleGroup(hostRef) {\n    _classCallCheck(this, ToggleGroup);\n\n    registerInstance(this, hostRef);\n    this.scaleChange = createEvent(this, \"scale-change\", 7);\n    this.scaleChangeLegacy = createEvent(this, \"scaleChange\", 7);\n    /** toggle button position within group */\n\n    this.position = 0;\n    /** number of slotted toggle-buttons */\n\n    this.slottedButtons = 0;\n    /** state */\n\n    this.status = [];\n    /** (optional) The size of the button */\n\n    this.size = 'regular';\n    /** (optional) Button Group background */\n\n    this.background = 'white';\n    /** (optional) 100% width */\n\n    this.fullWidth = false;\n    /** (optional) If `true`, the button is disabled */\n\n    this.disabled = false;\n    /** (optional) If `true`, the group has a border */\n\n    this.hideBorder = false;\n    /** (optional) more than one button selected possible */\n\n    this.singleSelect = false;\n    /** (optional) aria-label attribute needed for icon-only buttons */\n\n    this.ariaLabelTranslation = \"toggle button group with $slottedButtons buttons\";\n    /** @deprecated - variant should replace colorScheme */\n\n    this.colorScheme = 'color';\n    /** (optional) background variant of a selected toggle-button */\n\n    this.variant = 'color';\n  }\n\n  _createClass(ToggleGroup, [{\n    key: \"scaleClickHandler\",\n    value: function scaleClickHandler(ev) {\n      var tempState;\n\n      if (this.singleSelect) {\n        if (!ev.detail.selected) {\n          tempState = this.status.map(function (obj) {\n            return ev.detail.id === obj.id ? ev.detail : Object.assign({}, obj);\n          });\n          /* clicked button has now selected state */\n        } else {\n          tempState = this.status.map(function (obj) {\n            return ev.detail.id === obj.id ? ev.detail : Object.assign(Object.assign({}, obj), {\n              selected: false\n            });\n          });\n        }\n      } else {\n        tempState = this.status.map(function (obj) {\n          return ev.detail.id === obj.id ? ev.detail : Object.assign({}, obj);\n        });\n      }\n\n      this.setNewState(tempState);\n    }\n  }, {\n    key: \"handlePropsChange\",\n    value: function handlePropsChange() {\n      this.propagatePropsToChildren();\n    }\n  }, {\n    key: \"componentDidLoad\",\n    value: function componentDidLoad() {\n      var _this = this;\n\n      var tempState = [];\n      var toggleButtons = this.getAllToggleButtons();\n      this.slottedButtons = toggleButtons.length;\n      toggleButtons.forEach(function (toggleButton) {\n        _this.position++;\n        tempState.push({\n          id: toggleButton.getAttribute('toggle-button-id'),\n          selected: toggleButton.hasAttribute('selected')\n        });\n        toggleButton.setAttribute('position', _this.position.toString());\n        toggleButton.setAttribute('aria-description-translation', '$position $selected');\n      });\n      this.propagatePropsToChildren();\n      this.position = 0;\n      this.status = tempState;\n    }\n  }, {\n    key: \"getAllToggleButtons\",\n    value: function getAllToggleButtons() {\n      return Array.from(this.hostElement.querySelectorAll('scale-toggle-button'));\n    }\n    /**\n     * Keep props, needed in children buttons, in sync\n     */\n\n  }, {\n    key: \"propagatePropsToChildren\",\n    value: function propagatePropsToChildren() {\n      var _this2 = this;\n\n      this.getAllToggleButtons().forEach(function (el) {\n        el.setAttribute('size', _this2.size);\n        el.setAttribute('background', _this2.background);\n        el.setAttribute('disabled', _this2.disabled && 'disabled');\n        /** DEPRECATED */\n        // if attribute variant is set it overrides color-scheme\n\n        el.setAttribute('color-scheme', _this2.variant !== 'color' ? _this2.variant : _this2.colorScheme); // if attribute color-scheme is set it overrides variant\n\n        el.setAttribute('variant', _this2.colorScheme !== 'color' ? _this2.colorScheme : _this2.variant);\n        el.setAttribute('hide-border', _this2.hideBorder ? 'true' : 'false');\n      });\n    }\n  }, {\n    key: \"getAriaLabelTranslation\",\n    value: function getAriaLabelTranslation() {\n      var filledText = this.ariaLabelTranslation.replace(/\\$slottedButtons/g, \"\".concat(this.slottedButtons));\n      return filledText;\n    }\n  }, {\n    key: \"componentDidRender\",\n    value: function componentDidRender() {\n      if (this.fullWidth) {\n        this.setButtonWidth();\n      }\n\n      this.setChildrenCorners();\n\n      if (this.colorScheme !== 'color') {\n        statusNote({\n          tag: 'deprecated',\n          message: 'Property \"colorScheme\" is deprecated. Please use the \"variant\" property!',\n          type: 'warn',\n          source: this.hostElement\n        });\n      }\n    }\n  }, {\n    key: \"setNewState\",\n    value: function setNewState(tempState) {\n      var toggleButtons = Array.from(this.hostElement.querySelectorAll('scale-toggle-button'));\n      toggleButtons.forEach(function (button, i) {\n        button.setAttribute('selected', tempState[i].selected ? 'true' : 'false');\n      });\n      this.status = tempState;\n      emitEvent(this, 'scaleChange', this.status);\n    }\n  }, {\n    key: \"setButtonWidth\",\n    value: function setButtonWidth() {\n      Array.from(this.hostElement.children).forEach(function (child) {\n        var button = child.shadowRoot.querySelector('button');\n        button.style.width = '100%';\n      });\n    }\n  }, {\n    key: \"setChildrenCorners\",\n    value: function setChildrenCorners() {\n      var children = Array.from(this.hostElement.children);\n\n      if (children.length === 1) {\n        // set four border radius when there is only one child\n        children[0].setAttribute('radius', 'all');\n      } else {\n        for (var i = 0; i < children.length; i++) {\n          if (i === 0) {\n            children[i].setAttribute('radius', 'left');\n          }\n\n          if (i > 0 && i < children.length - 1) {\n            children[i].setAttribute('radius', 'neither');\n          }\n\n          if (i === children.length - 1) {\n            children[i].setAttribute('radius', 'right');\n          }\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return h(Host, null, this.styles && h(\"style\", null, this.styles), h(\"div\", {\n        class: this.getCssClassMap(),\n        part: this.getBasePartMap(),\n        \"aria-label\": this.getAriaLabelTranslation(),\n        role: \"group\"\n      }, h(\"slot\", null)));\n    }\n  }, {\n    key: \"getBasePartMap\",\n    value: function getBasePartMap() {\n      return this.getCssOrBasePartMap('basePart');\n    }\n  }, {\n    key: \"getCssClassMap\",\n    value: function getCssClassMap() {\n      return this.getCssOrBasePartMap('css');\n    }\n  }, {\n    key: \"getCssOrBasePartMap\",\n    value: function getCssOrBasePartMap(mode) {\n      var prefix = mode === 'basePart' ? '' : 'toggle-group--';\n      return classnames('toggle-group', this.fullWidth && \"\".concat(prefix, \"block\"), !this.fullWidth && \"\".concat(prefix, \"inline\"), this.disabled && \"\".concat(prefix, \"disabled\"));\n    }\n  }, {\n    key: \"hostElement\",\n    get: function get() {\n      return getElement(this);\n    }\n  }], [{\n    key: \"watchers\",\n    get: function get() {\n      return {\n        \"background\": [\"handlePropsChange\"],\n        \"disabled\": [\"handlePropsChange\"],\n        \"hideBorder\": [\"handlePropsChange\"],\n        \"size\": [\"handlePropsChange\"],\n        \"variant\": [\"handlePropsChange\"]\n      };\n    }\n  }]);\n\n  return ToggleGroup;\n}();\n\nToggleGroup.style = toggleGroupCss;\nexport { ToggleGroup as scale_toggle_group };","map":null,"metadata":{},"sourceType":"module"}