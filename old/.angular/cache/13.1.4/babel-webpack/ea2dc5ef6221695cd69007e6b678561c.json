{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Thomas\\\\Desktop\\\\md_fe\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"C:\\\\Users\\\\Thomas\\\\Desktop\\\\md_fe\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport _toConsumableArray from \"C:\\\\Users\\\\Thomas\\\\Desktop\\\\md_fe\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\toConsumableArray.js\";\nimport { r as registerInstance, c as createEvent, h, a as Host, g as getElement } from './index-f2e5998d.js';\nimport { c as classnames } from './index-713f92a5.js';\nimport { e as emitEvent } from './utils-524c237e.js';\n/**\n * Copy/pasted from https://github.com/andreasbm/focus-trap\n */\n\n/**\n * Traverses the slots of the open shadowroots and returns all children matching the query.\n * We need to traverse each child-depth one at a time because if an element should be skipped\n * (for example because it is hidden) we need to skip all of it's children. If we use querySelectorAll(\"*\")\n * the information of whether the children is within a hidden parent is lost.\n * @param {ShadowRoot | HTMLElement} root\n * @param skipNode\n * @param isMatch\n * @param {number} maxDepth\n * @param {number} depth\n * @returns {HTMLElement[]}\n */\n\nfunction queryShadowRoot(root, skipNode, isMatch) {\n  var maxDepth = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 20;\n  var depth = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n  var matches = []; // If the depth is above the max depth, abort the searching here.\n\n  if (depth >= maxDepth) {\n    return matches;\n  } // Traverses a slot element\n\n\n  var traverseSlot = function traverseSlot($slot) {\n    // Only check nodes that are of the type Node.ELEMENT_NODE\n    // Read more here https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeType\n    var assignedNodes = $slot.assignedNodes().filter(function (node) {\n      return node.nodeType === 1;\n    });\n\n    if (assignedNodes.length > 0) {\n      var $slotParent = assignedNodes[0].parentElement;\n      return queryShadowRoot($slotParent, skipNode, isMatch, maxDepth, depth + 1);\n    }\n\n    return [];\n  }; // Go through each child and continue the traversing if necessary\n  // Even though the typing says that children can't be undefined, Edge 15 sometimes gives an undefined value.\n  // Therefore we fallback to an empty array if it is undefined.\n\n\n  var children = Array.from(root.children || []);\n\n  for (var _i = 0, _children = children; _i < _children.length; _i++) {\n    var $child = _children[_i];\n\n    // Check if the element and its descendants should be skipped\n    if (skipNode($child)) {\n      // console.log('-- SKIP', $child);\n      continue;\n    } // console.log('$child', $child);\n    // If the element matches we always add it\n\n\n    if (isMatch($child)) {\n      matches.push($child);\n    }\n\n    if ($child.shadowRoot != null) {\n      // If the element has a shadow root we need to traverse it\n      matches.push.apply(matches, _toConsumableArray(queryShadowRoot($child.shadowRoot, skipNode, isMatch, maxDepth, depth + 1)));\n    } else if ($child.tagName === 'SLOT') {\n      // If the child is a slot we need to traverse each assigned node\n      matches.push.apply(matches, _toConsumableArray(traverseSlot($child)));\n    } else {\n      // Traverse the children of the element\n      matches.push.apply(matches, _toConsumableArray(queryShadowRoot($child, skipNode, isMatch, maxDepth, depth + 1)));\n    }\n  }\n\n  return matches;\n}\n/**\n * Returns whether the element is hidden.\n * @param $elem\n */\n\n\nfunction isHidden($elem) {\n  return $elem.hasAttribute('hidden') || $elem.hasAttribute('aria-hidden') && $elem.getAttribute('aria-hidden') !== 'false' || // A quick and dirty way to check whether the element is hidden.\n  // For a more fine-grained check we could use \"window.getComputedStyle\" but we don't because of bad performance.\n  // If the element has visibility set to \"hidden\" or \"collapse\", display set to \"none\" or opacity set to \"0\" through CSS\n  // we won't be able to catch it here. We accept it due to the huge performance benefits.\n  $elem.style.display === \"none\" || $elem.style.opacity === \"0\" || $elem.style.visibility === \"hidden\" || $elem.style.visibility === \"collapse\"; // If offsetParent is null we can assume that the element is hidden\n  // https://stackoverflow.com/questions/306305/what-would-make-offsetparent-null\n  // || $elem.offsetParent == null;\n}\n/**\n * Returns whether the element is disabled.\n * @param $elem\n */\n\n\nfunction isDisabled($elem) {\n  return $elem.hasAttribute('disabled') || $elem.hasAttribute('aria-disabled') && $elem.getAttribute('aria-disabled') !== 'false';\n}\n/**\n * Determines whether an element is focusable.\n * Read more here: https://stackoverflow.com/questions/1599660/which-html-elements-can-receive-focus/1600194#1600194\n * Or here: https://stackoverflow.com/questions/18261595/how-to-check-if-a-dom-element-is-focusable\n * @param $elem\n */\n\n\nfunction isFocusable($elem) {\n  // Discard elements that are removed from the tab order.\n  if ($elem.getAttribute('tabindex') === '-1' || isHidden($elem) || isDisabled($elem)) {\n    return false;\n  }\n\n  return (// At this point we know that the element can have focus (eg. won't be -1) if the tabindex attribute exists\n    $elem.hasAttribute('tabindex') || // Anchor tags or area tags with a href set\n    ($elem instanceof HTMLAnchorElement || $elem instanceof HTMLAreaElement) && $elem.hasAttribute('href') || // Form elements which are not disabled\n    $elem instanceof HTMLButtonElement || $elem instanceof HTMLInputElement || $elem instanceof HTMLTextAreaElement || $elem instanceof HTMLSelectElement || // IFrames\n    $elem instanceof HTMLIFrameElement\n  );\n}\n/**\n * @license\n * Scale https://github.com/telekom/scale\n *\n * Copyright (c) 2021 Egor Kirpichev and contributors, Deutsche Telekom AG\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at https://mozilla.org/MPL/2.0/.\n */\n\n/**\n * @see https://www.youtube.com/watch?v=9-6CKCz58A8\n */\n\n\nfunction animateTo(element, keyframes, options) {\n  var anim = element.animate(keyframes, Object.assign(Object.assign({}, options), {\n    fill: 'both'\n  }));\n  anim.addEventListener('finish', function () {\n    // @ts-ignore\n    anim.commitStyles();\n    anim.cancel();\n  });\n  return anim;\n}\n\nvar keyframeDefaults = {\n  easing: 'cubic-bezier(0.390, 0.575, 0.565, 1.000)'\n};\nvar KEYFRAMES = {\n  fadeIn: [Object.assign(Object.assign({\n    offset: 0\n  }, keyframeDefaults), {\n    opacity: 0\n  }), Object.assign(Object.assign({\n    offset: 1\n  }, keyframeDefaults), {\n    opacity: 1\n  })],\n  fadeOut: [Object.assign(Object.assign({\n    offset: 0\n  }, keyframeDefaults), {\n    opacity: 1\n  }), Object.assign(Object.assign({\n    offset: 1\n  }, keyframeDefaults), {\n    opacity: 0\n  })],\n  fadeInTop: [Object.assign(Object.assign({\n    offset: 0\n  }, keyframeDefaults), {\n    opacity: 0,\n    transform: 'translateY(-3rem)'\n  }), Object.assign(Object.assign({\n    offset: 1\n  }, keyframeDefaults), {\n    opacity: 1,\n    transform: 'translateY(0)'\n  })]\n};\nvar modalCss = \":host{--spacing-x:var(--scl-spacing-16);--background-overlay:var(\\n    --scl-color-background-overlay,\\n    rgba(108, 108, 108, 0.7)\\n  );--max-height-window:calc(100vh - (2 * var(--scl-spacing-80)));--radius-window:var(--scl-radius-12);--box-shadow-window:var(--scl-shadow-level-5);--size-window-small:calc(\\n    (6 * var(--scl-spacing-56, 3.5rem)) + (5 * var(--scl-spacing-32))\\n  );--size-window-default:calc(\\n    (8 * var(--scl-spacing-56, 3.5rem)) + (7 * var(--scl-spacing-32))\\n  );--size-window-large:calc(\\n    (12 * var(--scl-spacing-56, 3.5rem)) + (11 * var(--scl-spacing-32))\\n  );--spacing-x-header:var(--scl-spacing-24);--spacing-y-header:var(--scl-spacing-24);--border-bottom-header-has-scroll:var(--scl-spacing-1) solid\\n    var(--scl-color-grey-20);--font-family-heading:var(--scl-font-family-sans);--font-size-heading:var(--scl-font-size-20);--font-weight-heading:var(--scl-font-weight-extrabold);--spacing-close-button:var(--scl-spacing-8);--radius-close-button:var(--scl-radius-8);--transition-close-button:all var(--scl-motion-duration-fast)\\n    var(--scl-motion-easing-standard);--box-shadow-close-button-focus:0 0 0 var(--scl-spacing-2)\\n    var(--scl-color-focus);--color-close-button-hover:var(--scl-color-primary-hover);--color-close-button-active:var(--scl-color-primary-active);--spacing-x-body-wrapper:var(--scl-spacing-24);--spacing-y-body:var(--scl-spacing-24);--spacing-actions:var(--scl-spacing-24);--spacing-x-actions-slotted:var(--scl-spacing-8);--background-actions-has-scroll:var(--scl-color-background-light)}.modal{top:0;left:0;width:100%;bottom:0;display:none;z-index:100;position:fixed;background:var(--background-overlay);box-sizing:border-box;align-items:center;justify-content:center;padding-left:var(--spacing-x);padding-right:var(--spacing-x)}.modal.modal--is-open{display:flex}.modal__backdrop{top:0;left:0;width:100%;height:100%;z-index:0;position:absolute}.modal__window{width:100%;height:auto;display:flex;z-index:1;position:relative;overflow-y:auto;flex-direction:column;background-color:var(--scl-color-background-standard);max-height:var(--max-height-window);border-radius:var(--radius-window);box-shadow:var(--box-shadow-window)}.modal__window .modal__body-wrapper{overflow-y:auto;flex-shrink:1}.modal--size-small .modal__window{max-width:var(--size-window-small)}.modal--size-default .modal__window{max-width:var(--size-window-default)}.modal--size-large .modal__window{max-width:var(--size-window-large)}@media (max-height: 30em){.modal__window{max-height:calc(100vh - var(--scl-spacing-24))}}.modal__window:after{top:0;left:0;width:100%;border:1px solid transparent;height:100%;content:'';display:block;position:absolute;box-sizing:border-box;pointer-events:none;border-radius:var(--radius-window)}.modal__header{display:flex;align-items:flex-start;flex-shrink:0;justify-content:space-between;margin-left:var(--spacing-x-header);margin-right:var(--spacing-x-header);padding-top:var(--spacing-y-header);padding-bottom:var(--spacing-y-header)}.modal--has-scroll .modal__header{border-bottom:var(--border-bottom-header-has-scroll)}.modal__heading{margin:0;font-family:var(--font-family-heading);font-size:var(--font-size-heading);font-weight:var(--font-weight-heading)}.modal__close-button{box-sizing:border-box;display:inline-flex;align-items:center;justify-content:center;padding:var(--spacing-close-button);margin-bottom:calc(-2 * var(--spacing-close-button));border:0;border-radius:var(--radius-close-button);outline:none;background:transparent;transition:var(--transition-close-button);transform:translate(\\n    var(--spacing-close-button),\\n    calc(-1 * var(--spacing-close-button))\\n  );appearance:none;cursor:pointer;user-select:none;color:var(--scl-color-text-standard)}.modal__close-button:focus{box-shadow:var(--box-shadow-close-button-focus)}.modal__close-button:hover{color:var(--color-close-button-hover)}.modal__close-button:active{color:var(--color-close-button-active)}.modal__body-wrapper{padding-left:var(--spacing-x-body-wrapper);padding-right:var(--spacing-x-body-wrapper)}.modal--has-body .modal__body-wrapper{min-height:var(--scl-spacing-48)}.modal--has-body .modal__body{margin-top:var(--spacing-y-body);margin-bottom:var(--spacing-y-body)}.modal__actions{display:none;flex-shrink:0;justify-content:flex-end;padding:var(--spacing-actions)}.modal__actions ::slotted(*){margin-left:var(--spacing-x-actions-slotted)}.modal--has-actions .modal__actions{display:flex}.modal--align-actions-left .modal__actions{justify-content:flex-start}.modal--has-scroll .modal__actions{background-color:var(--background-actions-has-scroll)}\";\nvar supportsResizeObserver = ('ResizeObserver' in window);\n\nvar Modal = /*#__PURE__*/function () {\n  function Modal(hostRef) {\n    var _this = this;\n\n    _classCallCheck(this, Modal);\n\n    registerInstance(this, hostRef);\n    this.scaleOpen = createEvent(this, \"scale-open\", 7);\n    this.scaleOpenLegacy = createEvent(this, \"scaleOpen\", 7);\n    this.scaleBeforeClose = createEvent(this, \"scale-before-close\", 7);\n    this.scaleBeforeCloseLegacy = createEvent(this, \"scaleBeforeClose\", 7);\n    this.scaleClose = createEvent(this, \"scale-close\", 7);\n    this.scaleCloseLegacy = createEvent(this, \"scaleClose\", 7);\n    /** (optional) Custom class */\n\n    this.customClass = '';\n    /** (optional) Modal size */\n\n    this.size = 'default';\n    /** (optional) If `true`, the Modal is open. */\n\n    this.opened = false;\n    /** (optional) Transition duration */\n\n    this.duration = 200;\n    /** (optional) Label for close button */\n\n    this.closeButtonLabel = 'Close Pop-up';\n    /** (optional) Alignment of action buttons */\n\n    this.alignActions = 'right';\n    /** What actually triggers opening/closing the modal */\n\n    this.isOpen = this.opened || false;\n    /** Check wheter there are actions slots, style accordingly */\n\n    this.hasActionsSlot = false;\n    /** Check wheter there's content in the body, style accordingly */\n\n    this.hasBody = false;\n    /** Useful for toggling scroll-specific styles */\n\n    this.hasScroll = false;\n    this.focusableElements = [];\n\n    this.handleTopFocus = function () {\n      _this.attemptFocus(_this.getLastFocusableElement());\n    };\n\n    this.handleBottomFocus = function () {\n      _this.attemptFocus(_this.getFirstFocusableElement());\n    };\n  }\n\n  _createClass(Modal, [{\n    key: \"handleKeypress\",\n    value: function handleKeypress(event) {\n      if (!this.isOpen) {\n        return;\n      }\n\n      if (event.key === 'Escape') {\n        this.emitBeforeClose('ESCAPE_KEY');\n      }\n    }\n  }, {\n    key: \"disconnectedCallback\",\n    value: function disconnectedCallback() {\n      if (this.resizeObserver) {\n        this.resizeObserver.disconnect();\n      }\n    }\n    /**\n     * Set `hasActionsSlot` and `hasBody`.\n     */\n\n  }, {\n    key: \"componentWillRender\",\n    value: function componentWillRender() {\n      var actionSlots = this.hostElement.querySelectorAll('[slot=\"action\"]');\n      var bodySlot = Array.from(this.hostElement.shadowRoot.querySelectorAll('slot')).find(function (x) {\n        return !x.name;\n      });\n      this.hasActionsSlot = actionSlots.length > 0;\n\n      if (bodySlot != null) {\n        this.hasBody = bodySlot.assignedElements().length > 0;\n      }\n    }\n  }, {\n    key: \"emitBeforeClose\",\n    value: function emitBeforeClose(trigger) {\n      var emittedEvents = emitEvent(this, 'scaleBeforeClose', {\n        trigger: trigger\n      });\n      var prevented = emittedEvents.some(function (event) {\n        return event.defaultPrevented;\n      });\n\n      if (!prevented) {\n        this.opened = false;\n      }\n    }\n  }, {\n    key: \"componentDidLoad\",\n    value: function componentDidLoad() {\n      var _this2 = this;\n\n      // Query all focusable elements and store them in `focusableElements`.\n      // Needed for the \"focus trap\" functionality.\n      this.focusableElements = queryShadowRoot(this.hostElement.shadowRoot, function (el) {\n        return isHidden(el) || el.matches('[data-focus-trap-edge]');\n      }, isFocusable); // Set `hasScroll` state dynamically on resize.\n\n      if (supportsResizeObserver) {\n        // @ts-ignore\n        this.resizeObserver = new ResizeObserver(function () {\n          _this2.setHasScroll();\n        });\n        this.resizeObserver.observe(this.modalBody);\n      }\n\n      this.setHasScroll();\n    }\n  }, {\n    key: \"setHasScroll\",\n    value: function setHasScroll() {\n      var container = this.modalBody;\n      this.hasScroll = container.scrollHeight > container.clientHeight;\n    }\n  }, {\n    key: \"getFirstFocusableElement\",\n    value: function getFirstFocusableElement() {\n      return this.focusableElements[0];\n    }\n  }, {\n    key: \"getLastFocusableElement\",\n    value: function getLastFocusableElement() {\n      return this.focusableElements[this.focusableElements.length - 1];\n    }\n  }, {\n    key: \"attemptFocus\",\n    value: function attemptFocus(element) {\n      if (element == null) {\n        this.closeButton.focus();\n        return;\n      }\n\n      element.focus();\n    }\n  }, {\n    key: \"openedChanged\",\n    value: function openedChanged(newValue) {\n      if (newValue === true) {\n        this.open();\n      } else {\n        this.close();\n      }\n    }\n  }, {\n    key: \"open\",\n    value: function open() {\n      var _this3 = this;\n\n      this.isOpen = true;\n\n      try {\n        animateTo(this.modalWindow, KEYFRAMES.fadeInTop, {\n          duration: this.duration,\n          delay: this.duration * 0.5\n        });\n        var anim = animateTo(this.modalContainer, KEYFRAMES.fadeIn, {\n          duration: this.duration\n        });\n        anim.addEventListener('finish', function () {\n          _this3.attemptFocus(_this3.getFirstFocusableElement());\n\n          emitEvent(_this3, 'scaleOpen');\n        });\n      } catch (err) {\n        emitEvent(this, 'scaleOpen');\n      }\n    }\n  }, {\n    key: \"close\",\n    value: function close() {\n      var _this4 = this;\n\n      try {\n        var anim = animateTo(this.modalContainer, KEYFRAMES.fadeOut, {\n          duration: this.duration\n        });\n        anim.addEventListener('finish', function () {\n          _this4.isOpen = false;\n          emitEvent(_this4, 'scaleClose');\n        });\n      } catch (err) {\n        this.isOpen = false;\n        emitEvent(this, 'scaleClose');\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this5 = this;\n\n      return h(Host, null, this.styles && h(\"style\", null, this.styles), h(\"div\", {\n        ref: function ref(el) {\n          return _this5.modalContainer = el;\n        },\n        class: this.getCssClassMap(),\n        part: classnames('base', this.isOpen && 'open')\n      }, h(\"div\", {\n        class: \"modal__backdrop\",\n        part: \"backdrop\",\n        onClick: function onClick() {\n          return _this5.emitBeforeClose('BACKDROP');\n        }\n      }), h(\"div\", {\n        \"data-focus-trap-edge\": true,\n        onFocus: this.handleTopFocus,\n        tabindex: \"0\"\n      }), h(\"div\", {\n        class: \"modal__window\",\n        part: classnames('window', this.size && \"size-\".concat(this.size)),\n        ref: function ref(el) {\n          return _this5.modalWindow = el;\n        },\n        role: \"dialog\",\n        \"aria-modal\": \"true\",\n        \"aria-label\": this.heading,\n        title: this.heading\n      }, h(\"div\", {\n        class: \"modal__header\",\n        part: classnames('header', this.hasScroll && 'has-scroll')\n      }, h(\"h2\", {\n        class: \"modal__heading\",\n        part: \"heading\"\n      }, this.heading), h(\"button\", {\n        ref: function ref(el) {\n          return _this5.closeButton = el;\n        },\n        class: \"modal__close-button\",\n        part: \"close-button\",\n        onClick: function onClick() {\n          return _this5.emitBeforeClose('CLOSE_BUTTON');\n        },\n        \"aria-label\": this.closeButtonLabel\n      }, h(\"slot\", {\n        name: \"close-icon\"\n      }, h(\"scale-icon-action-circle-close\", {\n        decorative: true\n      })))), h(\"div\", {\n        ref: function ref(el) {\n          return _this5.modalBody = el;\n        },\n        class: \"modal__body-wrapper\",\n        part: classnames('body-wrapper', this.hasBody && 'has-body')\n      }, h(\"div\", {\n        class: \"modal__body\",\n        part: classnames('body', this.hasBody && 'has-body')\n      }, h(\"slot\", null))), h(\"div\", {\n        class: \"modal__actions\",\n        part: classnames('actions', \"align-\".concat(this.alignActions), this.hasActionsSlot && 'has-actions', this.hasScroll && 'has-scroll')\n      }, h(\"slot\", {\n        name: \"action\"\n      }))), h(\"div\", {\n        \"data-focus-trap-edge\": true,\n        onFocus: this.handleBottomFocus,\n        tabindex: \"0\"\n      })));\n    }\n  }, {\n    key: \"getCssClassMap\",\n    value: function getCssClassMap() {\n      return classnames('modal', this.isOpen && 'modal--is-open', this.hasActionsSlot && 'modal--has-actions', \"modal--align-actions-\".concat(this.alignActions), this.hasScroll && 'modal--has-scroll', this.hasBody && 'modal--has-body', this.size && \"modal--size-\".concat(this.size));\n    }\n  }, {\n    key: \"hostElement\",\n    get: function get() {\n      return getElement(this);\n    }\n  }], [{\n    key: \"watchers\",\n    get: function get() {\n      return {\n        \"opened\": [\"openedChanged\"]\n      };\n    }\n  }]);\n\n  return Modal;\n}();\n\nModal.style = modalCss;\nexport { Modal as scale_modal };","map":null,"metadata":{},"sourceType":"module"}