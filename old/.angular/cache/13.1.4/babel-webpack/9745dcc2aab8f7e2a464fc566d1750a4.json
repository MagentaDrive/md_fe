{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Users\\\\Thomas\\\\Desktop\\\\md_fe\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\toConsumableArray.js\";\nimport _classCallCheck from \"C:\\\\Users\\\\Thomas\\\\Desktop\\\\md_fe\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"C:\\\\Users\\\\Thomas\\\\Desktop\\\\md_fe\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport { r as registerInstance, h, a as Host, g as getElement } from './index-f2e5998d.js';\nimport { c as classnames } from './index-713f92a5.js';\nimport { s as statusNote } from './status-note-d227f142.js';\nvar tabNavCss = \":host{--tab-height:var(--scl-spacing-40);--tab-spacing:var(--scl-spacing-24);--tab-radius:var(--scl-radius-4);--tab-border-size:var(--scl-spacing-2);--tab-border-size-selected:var(--scl-spacing-4);--tab-border-color:var(--scl-color-grey-20)}\";\n/**\n * @see https://github.com/GoogleChromeLabs/howto-components/blob/master/elements/howto-tabs/howto-tabs.js\n */\n\nvar ARROW_LEFT = 'ArrowLeft';\nvar ARROW_RIGHT = 'ArrowRight';\nvar HOME = 'Home';\nvar END = 'End';\n\nvar TabNav = /*#__PURE__*/function () {\n  function TabNav(hostRef) {\n    _classCallCheck(this, TabNav);\n\n    registerInstance(this, hostRef);\n    /** True for smaller height and font size in tab headers. */\n\n    /** @deprecated - size should replace small */\n\n    this.small = false;\n    /** (optional) size  */\n\n    this.size = 'large';\n  }\n\n  _createClass(TabNav, [{\n    key: \"smallChanged\",\n    value: function smallChanged() {\n      this.propagateSizeToTabs();\n    }\n  }, {\n    key: \"handleClick\",\n    value: function handleClick(event) {\n      var nextTab = event.target;\n\n      if (nextTab.getAttribute('role') !== 'tab') {\n        return;\n      }\n\n      this.selectTab(nextTab);\n    }\n  }, {\n    key: \"handleKeydown\",\n    value: function handleKeydown(event) {\n      var target = event.target;\n      var nextTab;\n\n      if (target.getAttribute('role') !== 'tab') {\n        return;\n      } // Do not handle modifier shortcuts typically used by assistive technology\n\n\n      if (event.altKey) {\n        return;\n      }\n\n      switch (event.key) {\n        case ARROW_LEFT:\n          nextTab = this.getPreviousTab();\n          break;\n\n        case ARROW_RIGHT:\n          nextTab = this.getNextTab();\n          break;\n\n        case HOME:\n          nextTab = this.getFirstTab();\n          break;\n\n        case END:\n          nextTab = this.getLastTab();\n          break;\n\n        default:\n          return;\n      }\n\n      event.preventDefault();\n      this.selectTab(nextTab);\n    }\n  }, {\n    key: \"connectedCallback\",\n    value: function connectedCallback() {\n      if (!this.el.hasAttribute('role')) {\n        this.el.setAttribute('role', 'tablist');\n      }\n    }\n  }, {\n    key: \"componentDidRender\",\n    value: function componentDidRender() {\n      var _this = this;\n\n      Promise.all([customElements.whenDefined('scale-tab-header'), customElements.whenDefined('scale-tab-panel')]).then(function () {\n        _this.linkPanels();\n\n        _this.propagateSizeToTabs();\n      });\n\n      if (this.small !== false) {\n        statusNote({\n          tag: 'deprecated',\n          message: 'Property \"small\" is deprecated. Please use the \"size\" property!',\n          type: 'warn',\n          source: this.el\n        });\n      }\n    }\n  }, {\n    key: \"getAllTabs\",\n    value: function getAllTabs() {\n      return Array.from(this.el.querySelectorAll('scale-tab-header'));\n    }\n  }, {\n    key: \"getAllEnabledTabs\",\n    value: function getAllEnabledTabs() {\n      return Array.from(this.el.querySelectorAll('scale-tab-header:not([disabled])'));\n    }\n  }, {\n    key: \"getAllPanels\",\n    value: function getAllPanels() {\n      return Array.from(this.el.querySelectorAll('scale-tab-panel'));\n    }\n  }, {\n    key: \"getPreviousTab\",\n    value: function getPreviousTab() {\n      var tabs = this.getAllEnabledTabs();\n      var index = tabs.findIndex(function (tab) {\n        return tab.selected;\n      }) - 1;\n      return tabs[(index + tabs.length) % tabs.length];\n    }\n  }, {\n    key: \"getNextTab\",\n    value: function getNextTab() {\n      var tabs = this.getAllEnabledTabs();\n      var index = tabs.findIndex(function (tab) {\n        return tab.selected;\n      }) + 1;\n      return tabs[index % tabs.length];\n    }\n  }, {\n    key: \"getFirstTab\",\n    value: function getFirstTab() {\n      var tabs = this.getAllEnabledTabs();\n      return tabs[0];\n    }\n  }, {\n    key: \"getLastTab\",\n    value: function getLastTab() {\n      var tabs = this.getAllEnabledTabs();\n      return tabs[tabs.length - 1];\n    }\n  }, {\n    key: \"linkPanels\",\n    value: function linkPanels() {\n      var tabs = this.getAllEnabledTabs();\n      var selectedTab = tabs.find(function (x) {\n        return x.selected;\n      }) || tabs[0];\n      tabs.forEach(function (tab) {\n        var panel = tab.nextElementSibling;\n        tab.setAttribute('aria-controls', panel.id);\n        panel.setAttribute('aria-labelledby', tab.id);\n      });\n      this.selectTab(selectedTab);\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      var tabs = this.getAllEnabledTabs();\n      var panels = this.getAllPanels();\n      tabs.forEach(function (tab) {\n        return tab.selected = false;\n      });\n      panels.forEach(function (panel) {\n        return panel.hidden = true;\n      });\n    }\n  }, {\n    key: \"findPanelForTab\",\n    value: function findPanelForTab(tab) {\n      var panelId = tab.getAttribute('aria-controls');\n      return this.el.querySelector(\"#\".concat(panelId));\n    }\n  }, {\n    key: \"selectTab\",\n    value: function selectTab(nextTab) {\n      var nextPanel = this.findPanelForTab(nextTab);\n      this.reset();\n      nextPanel.hidden = false;\n      nextTab.selected = true;\n    }\n    /**\n     * Sets or removes the `small` prop in `scale-tab-header` and `scale-tab-panel` children.\n     */\n\n  }, {\n    key: \"propagateSizeToTabs\",\n    value: function propagateSizeToTabs() {\n      var action = this.size === 'small' || this.small ? 'setAttribute' : 'removeAttribute';\n      var tabs = this.getAllTabs();\n      var panels = this.getAllPanels();\n      [].concat(_toConsumableArray(tabs), _toConsumableArray(panels)).forEach(function (child) {\n        return child[action]('small', '');\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return h(Host, null, this.styles && h(\"style\", null, this.styles), h(\"div\", {\n        part: this.getBasePartMap(),\n        class: this.getCssClassMap()\n      }, h(\"slot\", {\n        name: \"tab\"\n      }), h(\"slot\", {\n        name: \"panel\"\n      })));\n    }\n  }, {\n    key: \"getBasePartMap\",\n    value: function getBasePartMap() {\n      return this.getCssOrBasePartMap('basePart');\n    }\n  }, {\n    key: \"getCssClassMap\",\n    value: function getCssClassMap() {\n      return this.getCssOrBasePartMap('css');\n    }\n  }, {\n    key: \"getCssOrBasePartMap\",\n    value: function getCssOrBasePartMap(mode) {\n      var component = 'tab-nav';\n      var prefix = mode === 'basePart' ? '' : \"\".concat(component, \"--\");\n      return classnames(component, (this.size === 'small' || this.small) && \"\".concat(prefix, \"small\"));\n    }\n  }, {\n    key: \"el\",\n    get: function get() {\n      return getElement(this);\n    }\n  }], [{\n    key: \"watchers\",\n    get: function get() {\n      return {\n        \"small\": [\"smallChanged\"]\n      };\n    }\n  }]);\n\n  return TabNav;\n}();\n\nTabNav.style = tabNavCss;\nexport { TabNav as scale_tab_nav };","map":null,"metadata":{},"sourceType":"module"}