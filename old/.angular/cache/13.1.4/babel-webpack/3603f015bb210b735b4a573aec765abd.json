{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Thomas\\\\Desktop\\\\md_fe\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"C:\\\\Users\\\\Thomas\\\\Desktop\\\\md_fe\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport { r as registerInstance, h, a as Host } from './index-f2e5998d.js';\nimport { c as classnames } from './index-713f92a5.js';\nvar loadingSpinnerCss = \":host{display:inline-flex;--size-outer-small:28px;--size-outer-large:56px;--size-inner-small:28px;--size-inner-large:56px;--line-height-size-small:24px;--line-height-size-large:48px;--font-weight:var(--scl-font-weight-bold);--font-size:var(--scl-font-size-16);--color-circle-primary:var(--scl-color-primary);--color-circle-primary-inner:var(--scl-color-grey-20);--color-text-primary:var(--scl-color-grey-60);--color-circle-white:var(--scl-color-white);--color-circle-white-inner:var(--scl-color-grey-60);--color-text-white:var(--scl-color-white)}.sr-only{position:absolute;left:-10000px;overflow:hidden}.spinner{display:inline-flex;align-items:center}.spinner.spinner--alignment-vertical{flex-direction:column}.spinner .spinner__text{font-weight:var(--font-weight);font-size:var(--font-size);color:var(--color-text-primary)}.spinner.spinner--variant-white .spinner__text{color:var(--color-circle-white)}.spinner.spinner--alignment-horizontal .spinner__text{display:flex;align-self:center;margin-left:var(--spacing);margin-top:3px}.spinner.spinner--alignment-horizontal.spinner--size-small .spinner__text{line-height:var(--line-height-size-small);padding-left:12px}.spinner.spinner--alignment-horizontal.spinner--size-large .spinner__text{line-height:var(--line-height-size-large);margin-top:5px;padding-left:12px}.spinner.spinner--alignment-vertical .spinner__text{margin-top:var(--spacing)}.spinner.spinner--alignment-vertical.spinner--size-small .spinner__container{height:28px;width:28px;padding-bottom:4px}.spinner.spinner--alignment-vertical.spinner--size-large .spinner__container{height:56px;width:56px;padding-bottom:4px}.spinner.spinner--alignment-horizontal.spinner--size-small .spinner__container{height:28px;width:28px;text-align:left}.spinner.spinner--alignment-horizontal.spinner--size-large .spinner__container{height:56px;width:56px;text-align:left}.spinner .spinner__container .spinner__circle{animation:rotate 2s linear infinite;z-index:2;position:absolute;width:var(--size-inner-small);height:var(--size-inner-small)}.spinner .spinner__container .spinner__circle-background{animation:rotate 2s linear infinite;position:absolute;width:var(--size-outer-small);height:var(--size-outer-small)}.spinner.spinner--size-large .spinner__container .spinner__circle-background{width:var(--size-outer-large);height:var(--size-outer-large)}.spinner.spinner--size-large .spinner__container .spinner__circle{width:var(--size-inner-large);height:var(--size-inner-large)}.spinner.spinner--variant-white .spinner__container .spinner__circle-background .path{stroke:var(--color-circle-white-inner)}.spinner .spinner__container .spinner__circle-background .path{stroke:var(--color-circle-primary-inner)}.spinner.spinner--variant-white .spinner__container .spinner__circle .path{stroke:white}.spinner .spinner__container .spinner__circle .path{animation:dash 1.5s ease-in-out infinite;stroke:var(--color-circle-primary)}@keyframes rotate{100%{transform:rotate(360deg)}}@keyframes dash{0%{stroke-dasharray:1, 150;stroke-dashoffset:0}50%{stroke-dasharray:90, 150;stroke-dashoffset:-35}100%{stroke-dasharray:90, 150;stroke-dashoffset:-124}}@media screen and (forced-colors: active), (-ms-high-contrast: active){.spinner .spinner__container .spinner__circle-background .path{stroke:none}.spinner .spinner__container .spinner__circle .path{stroke:white}.spinner.spinner--variant-white .spinner__container .spinner__circle-background .path{stroke:none}.spinner.spinner--variant-white .spinner__container .spinner__circle .path{stroke:white}}\";\nvar i = 0;\n\nvar LoadingSpinner = /*#__PURE__*/function () {\n  function LoadingSpinner(hostRef) {\n    _classCallCheck(this, LoadingSpinner);\n\n    registerInstance(this, hostRef);\n    this.variant = 'primary';\n    this.alignment = 'horizontal';\n    this.size = 'small';\n  }\n\n  _createClass(LoadingSpinner, [{\n    key: \"componentWillLoad\",\n    value: function componentWillLoad() {\n      i++;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return h(Host, null, h(\"div\", {\n        part: this.getBasePartMap(),\n        class: this.getCssClassMap()\n      }, h(\"div\", {\n        part: \"container\",\n        class: \"spinner__container\"\n      }, h(\"svg\", {\n        class: \"spinner__circle\",\n        viewBox: \"0 0 50 50\",\n        \"aria-hidden\": \"true\"\n      }, h(\"circle\", {\n        class: \"path\",\n        cx: \"25\",\n        cy: \"25\",\n        r: \"20\",\n        fill: \"none\",\n        \"stroke-width\": \"4\"\n      })), h(\"svg\", {\n        class: \"spinner__circle-background\",\n        viewBox: \"0 0 50 50\",\n        \"aria-hidden\": \"true\"\n      }, h(\"circle\", {\n        class: \"path\",\n        cx: \"25\",\n        cy: \"25\",\n        r: \"20\",\n        fill: \"none\",\n        \"stroke-width\": \"4\"\n      }))), h(\"div\", {\n        class: \"sr-only\",\n        \"aria-live\": \"polite\",\n        id: \"spinner-label-\".concat(i)\n      }, this.text || 'Loading'), this.text ? h(\"div\", {\n        part: \"text\",\n        class: \"spinner__text\",\n        \"aria-hidden\": \"true\"\n      }, this.text) : h(\"div\", null)));\n    }\n  }, {\n    key: \"getBasePartMap\",\n    value: function getBasePartMap() {\n      return this.getCssOrBasePartMap('basePart');\n    }\n  }, {\n    key: \"getCssClassMap\",\n    value: function getCssClassMap() {\n      return this.getCssOrBasePartMap('css');\n    }\n  }, {\n    key: \"getCssOrBasePartMap\",\n    value: function getCssOrBasePartMap(mode) {\n      var name = 'spinner';\n      var prefix = mode === 'basePart' ? '' : \"\".concat(name, \"--\");\n      return classnames(name, this.alignment && \"\".concat(prefix, \"alignment-\").concat(this.alignment), this.variant && \"\".concat(prefix, \"variant-\").concat(this.variant), this.size && \"\".concat(prefix, \"size-\").concat(this.size), this.text && \"\".concat(prefix, \"text\"));\n    }\n  }]);\n\n  return LoadingSpinner;\n}();\n\nLoadingSpinner.style = loadingSpinnerCss;\nexport { LoadingSpinner as scale_loading_spinner };","map":null,"metadata":{},"sourceType":"module"}