{"ast":null,"code":"import _createForOfIteratorHelper from \"C:\\\\Users\\\\Thomas\\\\Desktop\\\\md_fe\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createForOfIteratorHelper.js\";\nimport _classCallCheck from \"C:\\\\Users\\\\Thomas\\\\Desktop\\\\md_fe\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"C:\\\\Users\\\\Thomas\\\\Desktop\\\\md_fe\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport { h, r as registerInstance, c as createEvent, a as Host, g as getElement } from './index-f2e5998d.js';\nimport { c as classnames } from './index-713f92a5.js';\nimport { e as emitEvent } from './utils-524c237e.js';\n/**\n * @license\n * Scale https://github.com/telekom/scale\n *\n * Copyright (c) 2021 Egor Kirpichev and contributors, Deutsche Telekom AG\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at https://mozilla.org/MPL/2.0/.\n */\n// Expected content: boolean, eg `true`\n// Options\n// style?: string 'switch' | 'checkbox'\n// editable?: boolean = false\n\nvar CheckboxCell = {\n  defaults: {\n    sortBy: 'number'\n  },\n  getLongestContent: function getLongestContent(_ref) {\n    var rows = _ref.rows,\n        columnIndex = _ref.columnIndex;\n    // Skip check as content width is always the same\n    return rows[0][columnIndex];\n  },\n  render: function render(_ref2) {\n    var field = _ref2.field,\n        content = _ref2.content,\n        component = _ref2.component,\n        rowIndex = _ref2.rowIndex,\n        columnIndex = _ref2.columnIndex;\n    var _field$style = field.style,\n        style = _field$style === void 0 ? 'checkbox' : _field$style,\n        _field$editable = field.editable,\n        editable = _field$editable === void 0 ? false : _field$editable,\n        label = field.label;\n    var props = {\n      checked: content,\n      disabled: !editable,\n      label: label\n    };\n\n    if (editable) {\n      props.onScaleChange = function (ev) {\n        var value = ev.detail.value; // Update rows data\n\n        component.rows[rowIndex][columnIndex] = value; // Trigger event\n\n        component.triggerEditEvent(value, rowIndex, columnIndex);\n      };\n    }\n\n    switch (style) {\n      case 'switch':\n        return h(\"scale-switch\", Object.assign({}, props));\n\n      default:\n        // 'checkbox'\n        return h(\"scale-checkbox\", Object.assign({}, props));\n    }\n  }\n};\n/**\n * @license\n * Scale https://github.com/telekom/scale\n *\n * Copyright (c) 2021 Egor Kirpichev and contributors, Deutsche Telekom AG\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at https://mozilla.org/MPL/2.0/.\n */\n// Expected: date/time string, eg '10:23:00'\n// TODO: see if this is even worth it. It may help with sorting/filtering?\n// work out format requirements - as date/time formatting is heavy eg moment.js\n// const { inputFormat, outputFormat } = field;\n// inputFormat: 'HH:mm:ss', // ['timestamp', '']\n// outputFormat: 'HH:mm',\n\nvar DateCell = {\n  defaults: {\n    sortBy: 'text'\n  },\n  render: function render(_ref3) {\n    var content = _ref3.content,\n        isAutoWidthCheck = _ref3.isAutoWidthCheck;\n    var value = content; // Render all digits with 8s as they're the widest\n\n    if (isAutoWidthCheck) {\n      value = value.replace(/[0-9]/g, '8');\n    }\n\n    return h(\"p\", {\n      class: \"scl-body\"\n    }, value);\n  }\n};\n/**\n * @license\n * Scale https://github.com/telekom/scale\n *\n * Copyright (c) 2021 Egor Kirpichev and contributors, Deutsche Telekom AG\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at https://mozilla.org/MPL/2.0/.\n */\n// Expected content: number, eg 10230.32\n// Options\n// style?: string 'bar' | 'progress'\n// min?: number 0\n// max?: number 100\n\nvar GraphCell = {\n  defaults: {\n    sortBy: 'number'\n  },\n  render: function render(_ref4) {\n    var field = _ref4.field,\n        content = _ref4.content;\n    var _field$style2 = field.style,\n        style = _field$style2 === void 0 ? 'progress' : _field$style2,\n        _field$min = field.min,\n        min = _field$min === void 0 ? 0 : _field$min,\n        _field$max = field.max,\n        max = _field$max === void 0 ? 100 : _field$max; // Convert content to 0>100 range for progress bar\n\n    var progress = (content - min) / (max - min) * 100;\n\n    switch (style) {\n      case 'bar':\n        return h(\"div\", {\n          class: \"tbody__bar-cell\"\n        }, h(\"scale-progress-bar\", {\n          \"aria-hidden\": \"true\",\n          percentage: progress,\n          // showStatus={true}\n          mute: true,\n          style: {\n            maxWidth: '200px'\n          },\n          styles:\n          /* css */\n          \".progress-bar__outer {\\n                min-width: 50px;\\n                max-width: 200px;\\n              }\\n              .progress-bar__inner {\\n                background: var(--scl-color-grey-80) !important;\\n              }\\n              \"\n        }), h(\"p\", {\n          class: \"scl-body\"\n        }, content));\n\n      default:\n        // progress\n        return h(\"scale-progress-bar\", {\n          percentage: progress,\n          showStatus: true,\n          mute: true,\n          styles:\n          /* css */\n          \".progress-bar__outer {\\n              min-width: 50px;\\n              max-width: 200px;\\n            }\\n            .progress-bar__inner {\\n                background: var(--scl-color-blue-60) !important;\\n              }\\n            \"\n        });\n    }\n  }\n};\n/**\n * @license\n * Scale https://github.com/telekom/scale\n *\n * Copyright (c) 2021 Egor Kirpichev and contributors, Deutsche Telekom AG\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at https://mozilla.org/MPL/2.0/.\n */\n// Expected content: a url string (eg: 'https://sample.com')\n\nvar LinkCell = {\n  defaults: {\n    sortBy: 'text'\n  },\n  render: function render(_ref5) {\n    var content = _ref5.content;\n    // Remove protocol (http/https)\n    var urlNoProtocol = content.replace(/^https?\\:\\/\\//i, '');\n    return h(\"scale-link\", {\n      href: content,\n      target: \"_blank\"\n    }, urlNoProtocol);\n  }\n};\n/**\n * @license\n * Scale https://github.com/telekom/scale\n *\n * Copyright (c) 2021 Egor Kirpichev and contributors, Deutsche Telekom AG\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at https://mozilla.org/MPL/2.0/.\n */\n// Expected content: HTMLElement\n\nvar HTMLCell = {\n  defaults: {},\n  getLongestContent: function getLongestContent(_ref6) {\n    var rows = _ref6.rows,\n        columnIndex = _ref6.columnIndex;\n    // Skip check as content width is always the same\n    return rows[0][columnIndex];\n  },\n  render: function render(_ref7) {\n    var content = _ref7.content,\n        component = _ref7.component;\n    return h(\"scale-button\", {\n      variant: \"secondary\",\n      size: \"small\",\n      \"icon-only\": true,\n      \"aria-label\": \"Activate to \".concat(content.isExpanded ? 'collapse' : 'expand', \" content\"),\n      onClick: function onClick() {\n        content.isExpanded = !content.isExpanded;\n        component.forceRender++;\n      }\n    }, content.isExpanded ? h(\"scale-icon-navigation-collapse-up\", {\n      size: 14\n    }) : h(\"scale-icon-navigation-collapse-down\", {\n      size: 14\n    }));\n  }\n};\n/**\n * @license\n * Scale https://github.com/telekom/scale\n *\n * Copyright (c) 2021 Egor Kirpichev and contributors, Deutsche Telekom AG\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at https://mozilla.org/MPL/2.0/.\n */\n// Expected content: number or string, eg `120.0`\n// Options\n// precision\n// decimalSymbol\n// groupSymbol\n// editable?: boolean = false\n\nvar NumberCell = {\n  defaults: {\n    textAlign: 'right',\n    sortBy: 'number'\n  },\n  render: function render(_ref8) {\n    var field = _ref8.field,\n        content = _ref8.content,\n        component = _ref8.component,\n        rowIndex = _ref8.rowIndex,\n        columnIndex = _ref8.columnIndex,\n        isAutoWidthCheck = _ref8.isAutoWidthCheck;\n    var _field$precision = field.precision,\n        precision = _field$precision === void 0 ? Infinity : _field$precision,\n        _field$decimalSymbol = field.decimalSymbol,\n        decimalSymbol = _field$decimalSymbol === void 0 ? '.' : _field$decimalSymbol,\n        _field$groupSymbol = field.groupSymbol,\n        groupSymbol = _field$groupSymbol === void 0 ? '' : _field$groupSymbol,\n        _field$prefix = field.prefix,\n        prefix = _field$prefix === void 0 ? '' : _field$prefix,\n        _field$suffix = field.suffix,\n        suffix = _field$suffix === void 0 ? '' : _field$suffix,\n        _field$editable2 = field.editable,\n        editable = _field$editable2 === void 0 ? false : _field$editable2,\n        label = field.label; // Input component doesn't expand with content, so need to return a fake element that simulates width\n\n    if (isAutoWidthCheck && editable) {\n      return h(\"p\", {\n        class: \"scl-body\",\n        style: {\n          paddingRight: '26px'\n        }\n      }, content);\n    }\n\n    var step = \"0.\".concat((String(content).split('.')[1] || '').split('').map(function () {\n      return '0';\n    })).replace(/,/g, '');\n\n    if (editable) {\n      var props = {\n        type: 'number',\n        size: 'small',\n        step: step.slice(0, step.length - 1) + '1',\n        value: String(content),\n        styles:\n        /* css */\n        \".text-field__control {\\n          text-align: right !important;\\n        }\",\n        label: label\n      }; // TODO: use blur to reduce number of changes - but doesn't pass value\n\n      props.onScaleChange = function (_ref9) {\n        var detail = _ref9.detail;\n        var value = detail.value; // Update rows data\n\n        component.rows[rowIndex][columnIndex] = value; // Trigger event\n\n        component.triggerEditEvent(value, rowIndex, columnIndex);\n      };\n\n      return h(\"scale-text-field\", Object.assign({}, props));\n    } else {\n      var value = content; // Render all digits with 8s as they're the widest\n\n      if (isAutoWidthCheck) {\n        value = Number(value.toString().replace(/[0-9]/g, '8'));\n      } // Refine to requested decimal precision\n\n\n      if (precision < 100) {\n        value = Number(value).toFixed(precision);\n      } else {\n        value = value.toString();\n      } // Replace/add requested delimiters\n\n\n      if (groupSymbol || decimalSymbol !== '.') {\n        var parts = value.split('.');\n\n        if (groupSymbol) {\n          parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, groupSymbol);\n        }\n\n        value = parts.join(decimalSymbol);\n      } // Add prefix/suffix\n\n\n      if (prefix || suffix) {\n        value = prefix + value + suffix;\n      }\n\n      return h(\"p\", {\n        class: \"scl-body\",\n        style: {\n          textAlign: 'right'\n        }\n      }, value);\n    }\n  }\n};\n/**\n * @license\n * Scale https://github.com/telekom/scale\n *\n * Copyright (c) 2021 Egor Kirpichev and contributors, Deutsche Telekom AG\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at https://mozilla.org/MPL/2.0/.\n */\n// Expected: string\n// Options\n// options: string array\n// editable?: boolean = false\n\nvar SelectCell = {\n  defaults: {\n    sortBy: 'text'\n  },\n  render: function render(_ref10) {\n    var field = _ref10.field,\n        content = _ref10.content,\n        component = _ref10.component,\n        rowIndex = _ref10.rowIndex,\n        columnIndex = _ref10.columnIndex,\n        isAutoWidthCheck = _ref10.isAutoWidthCheck;\n    var options = field.options,\n        _field$editable3 = field.editable,\n        editable = _field$editable3 === void 0 ? false : _field$editable3,\n        label = field.label; // Select component doesn't expand with content, so need to return a fake element that simulates width\n\n    if (isAutoWidthCheck) {\n      return h(\"p\", {\n        class: \"scl-body\",\n        style: {\n          paddingRight: '56px'\n        }\n      }, content);\n    }\n\n    var props = {\n      disabled: !editable,\n      value: content,\n      label: label\n    };\n\n    if (editable) {\n      props.onScaleChange = function (_ref11) {\n        var detail = _ref11.detail;\n        var value = detail.value; // Update rows data\n\n        component.rows[rowIndex][columnIndex] = value; // Trigger event\n\n        component.triggerEditEvent(value, rowIndex, columnIndex);\n      };\n    }\n\n    return h(\"scale-dropdown\", Object.assign({\n      size: \"small\"\n    }, props), options.map(function (option) {\n      return h(\"option\", {\n        value: option,\n        selected: option === content\n      }, option);\n    }));\n  }\n};\n/**\n * @license\n * Scale https://github.com/telekom/scale\n *\n * Copyright (c) 2021 Egor Kirpichev and contributors, Deutsche Telekom AG\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at https://mozilla.org/MPL/2.0/.\n */\n// Expected: comma delimited string (eg 'one, two, three')\n\nvar TagsCell = {\n  defaults: {\n    sortBy: 'text'\n  },\n  render: function render(_ref12) {\n    var content = _ref12.content;\n    var tags = content.split(',').map(function (s) {\n      return s.trim();\n    });\n    return h(\"ul\", {\n      class: \"tbody__tag-list\"\n    }, tags.map(function (tag) {\n      return h(\"li\", null, h(\"scale-tag\", {\n        size: \"small\"\n      }, tag));\n    }));\n  }\n};\n/**\n * @license\n * Scale https://github.com/telekom/scale\n *\n * Copyright (c) 2021 Egor Kirpichev and contributors, Deutsche Telekom AG\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at https://mozilla.org/MPL/2.0/.\n */\n// Expected content: unformated string 'this is a string'\n// Options\n// variant?: string 'body' | 'h6' | 'h5' | etc\n// editable?: boolean = false\n// iconPrefix?: string eg 'action-download'\n// iconSuffix?: string eg 'action-download'\n\nvar TextCell = {\n  defaults: {\n    sortBy: 'text'\n  },\n  render: function render(_ref13) {\n    var field = _ref13.field,\n        content = _ref13.content,\n        component = _ref13.component,\n        rowIndex = _ref13.rowIndex,\n        columnIndex = _ref13.columnIndex,\n        isAutoWidthCheck = _ref13.isAutoWidthCheck;\n    var _field$variant = field.variant,\n        variant = _field$variant === void 0 ? 'body' : _field$variant,\n        _field$editable4 = field.editable,\n        editable = _field$editable4 === void 0 ? false : _field$editable4,\n        iconPrefix = field.iconPrefix,\n        iconSuffix = field.iconSuffix,\n        label = field.label; // Input component doesn't expand with content, so need to return a fake element that simulates width\n\n    if (isAutoWidthCheck && editable) {\n      return h(\"p\", {\n        class: \"scl-body\",\n        style: {\n          paddingRight: '26px'\n        }\n      }, content);\n    }\n\n    if (editable) {\n      var props = {\n        type: 'text',\n        size: 'small',\n        value: content,\n        label: label\n      }; // TODO: use blur to reduce number of changes - but doesn't pass value\n      // TODO: apply variant and iconPrefix/Suffix to editable text\n\n      props.onScaleChange = function (_ref14) {\n        var detail = _ref14.detail;\n        var value = detail.value; // Update rows data\n\n        component.rows[rowIndex][columnIndex] = value; // Trigger event\n\n        component.triggerEditEvent(value, rowIndex, columnIndex);\n      };\n\n      return h(\"scale-text-field\", Object.assign({}, props));\n    } else {\n      var value = content; // Add an extra couple of characters for the width check to avoid clipping\n\n      if (isAutoWidthCheck) {\n        value += 'w';\n      }\n\n      return h(\"div\", {\n        class: \"tbody__text-cell\"\n      }, iconPrefix && h(\"span\", {\n        class: \"tbody__text-cell-prefix\"\n      }, h(\"scale-icon-\".concat(iconPrefix))), h(\"p\", {\n        class: \"scl-\".concat(variant)\n      }, value), iconSuffix && h(\"span\", {\n        class: \"tbody__text-cell-suffix\"\n      }, h(\"scale-icon-\".concat(iconSuffix))));\n    }\n  }\n};\n/**\n * @license\n * Scale https://github.com/telekom/scale\n *\n * Copyright (c) 2021 Egor Kirpichev and contributors, Deutsche Telekom AG\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at https://mozilla.org/MPL/2.0/.\n */\n\nvar __rest = undefined && undefined.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nvar ActionsCell = {\n  defaults: {},\n  getLongestContent: function getLongestContent(_ref15) {\n    var rows = _ref15.rows,\n        columnIndex = _ref15.columnIndex;\n    // Skip check as content width is always the same\n    return rows[0][columnIndex];\n  },\n  render: function render(_ref16) {\n    var content = _ref16.content;\n    return h(\"div\", {\n      class: \"tbody__actions\"\n    }, content.map(function (action) {\n      var label = action.label,\n          props = __rest(action, [\"label\"]);\n\n      if (typeof label === 'object' && '__html' in label) {\n        return h(\"scale-button\", Object.assign({\n          innerHTML: label.__html\n        }, props));\n      }\n\n      return h(\"scale-button\", Object.assign({}, props), label);\n    }));\n  }\n};\n/**\n * @license\n * Scale https://github.com/telekom/scale\n *\n * Copyright (c) 2021 Egor Kirpichev and contributors, Deutsche Telekom AG\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at https://mozilla.org/MPL/2.0/.\n */\n\nvar CELL_TYPES = {\n  checkbox: CheckboxCell,\n  date: DateCell,\n  graph: GraphCell,\n  html: HTMLCell,\n  link: LinkCell,\n  number: NumberCell,\n  select: SelectCell,\n  tags: TagsCell,\n  text: TextCell,\n  actions: ActionsCell\n}; // Fallback if no type set on field\n\nvar DEFAULT_CELL_TYPE = 'text'; // Common cell defaults, can be overridden in cell type classes\n\nvar CELL_DEFAULTS = {\n  maxWidth: Infinity,\n  minWidth: 20,\n  resizable: true,\n  sortable: false,\n  sortBy: 'text',\n  textAlign: 'left',\n  visible: true,\n  width: 'auto'\n};\nvar dataGridCss = \".scl-body{margin:0;line-height:var(--scl-font-variant-body-line-height);font-weight:var(--scl-font-variant-body-weight)}.scl-label{margin:0;font-size:var(--scl-font-variant-label-size);line-height:var(--scl-font-variant-label-line-height);font-weight:var(--scl-font-variant-label-weight)}.scl-h1{margin:0;font-size:var(--scl-font-variant-heading-1-size);line-height:var(--scl-font-variant-heading-1-line-height);font-weight:var(--scl-font-variant-heading-1-weight)}.scl-h2{margin:0;font-size:var(--scl-font-variant-heading-2-size);line-height:var(--scl-font-variant-heading-2-line-height);font-weight:var(--scl-font-variant-heading-2-weight)}.scl-h3{margin:0;font-size:var(--scl-font-variant-heading-3-size);line-height:var(--scl-font-variant-heading-3-line-height);font-weight:var(--scl-font-variant-heading-3-weight)}.scl-h4{margin:0;font-size:var(--scl-font-variant-heading-4-size);line-height:var(--scl-font-variant-heading-4-line-height);font-weight:var(--scl-font-variant-heading-4-weight)}.scl-h5{margin:0;font-size:var(--scl-font-variant-heading-5-size);line-height:var(--scl-font-variant-heading-5-line-height);font-weight:var(--scl-font-variant-heading-5-weight)}.scl-h6{margin:0;font-size:var(--scl-font-variant-heading-6-size);line-height:var(--scl-font-variant-heading-6-line-height);font-weight:var(--scl-font-variant-heading-6-weight)}:host{font-family:var(--scl-font-family-sans);font-size:var(--scl-font-size-16);font-weight:var(--scl-font-weight-regular);line-height:var(--scl-font-line-height-150);color:var(--scl-color-grey-90)}.data-grid input,.data-grid select{letter-spacing:inherit;font-weight:inherit;font-family:inherit;line-height:inherit}.data-grid{position:relative;display:block;background:var(--scl-color-white);border-radius:var(--scl-radius-12);border:1px solid var(--scl-color-grey-10);overflow:hidden}.data-grid--hide-border{border:none}.data-grid__auto-width-check{opacity:0}.data-grid__title-block{display:flex;align-items:center;justify-content:space-between;padding-right:62px;padding-left:var(--scl-spacing-24)}.data-grid__settings-menu{position:absolute;top:var(--scl-spacing-16);right:var(--scl-spacing-16)}.data-grid__scroll-container{overflow:auto;overflow-x:overlay;overflow-y:overlay;ms-overflow-style:-ms-autohiding-scrollbar;scrollbar-gutter:stable}.data-grid__table{border-spacing:0;border-collapse:collapse;overflow:hidden}.data-grid--hide-menu .data-grid__settings-menu{display:none}.data-grid:not(.data-grid--hide-menu) .data-grid__title-block{min-height:72px}.data-grid--hide-menu .data-grid__title-block{padding-right:var(--scl-spacing-16)}.thead{display:block;white-space:nowrap;border-bottom:1px solid var(--scl-color-grey-10);position:relative;background:#fff;z-index:1}.thead-sortable{cursor:pointer}.thead-sortable:focus{box-shadow:inset 0 0 0 var(--scl-spacing-2) var(--scl-color-focus)}.thead__cell{display:inline-flex;align-items:center;height:var(--scl-spacing-32);text-align:left;user-select:none;position:relative;padding:0 var(--scl-spacing-16);color:var(--scl-color-grey)}.thead__cell--numbered{text-align:right;justify-content:flex-end}.thead__cell--selection{justify-content:center;text-align:center}.thead__cell--selection xds-checkbox::part(container){justify-content:center}.thead__text{font-size:var(--scl-font-size-12);line-height:var(--scl-font-variant-body-size);position:relative}.thead__arrow-top,.thead__arrow-bottom{position:absolute;display:none;top:4px;left:-12px;border:4px solid transparent}.thead__arrow-top{border-top:none;border-bottom:5px solid var(--scl-color-grey-90)}.thead__arrow-bottom{border-bottom:none;border-top:5px solid var(--scl-color-grey-90)}.thead__sort-prompt{position:absolute;top:0;left:0;width:100%;height:100%;margin:0;background:none;border:0;opacity:1;cursor:pointer}.thead__divider{position:absolute;right:calc(-1 * var(--scl-spacing-8));bottom:0px;height:100%;padding:19px var(--scl-spacing-8) 0px;box-sizing:border-box;cursor:col-resize;z-index:1}.thead__divider-line{pointer-events:none;height:100%;width:1px;background:var(--scl-color-grey-10)}.thead__cell:first-child{padding-left:var(--scl-spacing-24)}.thead__cell:focus{outline:none}.thead__cell[aria-sort='ascending'] .thead__arrow-top{display:block}.thead__cell[aria-sort='descending'] .thead__arrow-bottom{display:block}.thead__cell[aria-sort]:hover{color:var(--scl-color-primary-hover)}.thead__cell[aria-sort='none']:hover .thead__arrow-top{display:block;border-bottom:5px solid var(--scl-color-primary-hover)}.thead__cell[aria-sort='ascending']:hover .thead__arrow-top{border-bottom:5px solid var(--scl-color-primary-hover)}.thead__cell[aria-sort='descending']:hover .thead__arrow-bottom{border-top:5px solid var(--scl-color-primary-hover)}.tbody{display:block}.tbody__row{display:block;white-space:nowrap}.tbody__mobile-title{display:none}.tbody__mobile-label{display:none}.tbody__cell{display:inline-block;margin:8px;padding:8px;overflow:hidden;line-height:32px}.tbody__cell--numbered{text-align:right}.tbody__cell--selection{justify-content:center;text-align:center}.tbody__cell--selection scale-checkbox::part(container),.tbody__cell--selection scale-checkbox [part='container']{justify-content:center}.tbody__nested{white-space:nowrap;padding:0px;margin:0px}.tbody__nested-cell{display:block;padding:var(--scl-spacing-16);margin:0px}.tbody__cell:first-of-type{margin-left:var(--scl-spacing-16);}.tbody__nested-cell:first-child{margin-left:0px}.data-grid--shade-alternate .tbody__row:nth-of-type(even),.data-grid--shade-alternate .tbody__nested:nth-of-type(even){background:#f3f3f3}.data-grid__auto-width-check .tbody__cell{padding:0}.tbody__tag-list{list-style:none;padding:0;margin:0}.tbody__tag-list li{display:inline-block;margin-right:8px}.tbody__tag-list li:last-child{margin-right:0}.data-grid input[type='checkbox']{display:block;height:14px;margin:5px 4px}.tbody__text-cell{display:flex;align-items:center}.tbody__text-cell-prefix{display:inline-flex;align-items:center;margin-right:0.5em}.tbody__text-cell-suffix{display:inline-flex;align-items:center;margin-left:0.5em}.tbody__cell p{overflow:hidden;text-overflow:ellipsis}.tbody__cell scale-link{overflow:hidden;text-overflow:ellipsis}.tbody__bar-cell{display:inline-flex;width:100%}.tbody__cell scale-progress-bar{flex-grow:1}.tbody__actions scale-button{margin-right:var(--scl-spacing-8)}.info{height:54px;position:relative;border-top:1px solid var(--scl-color-grey-20);display:flex;justify-content:center}.info__selection{position:absolute;bottom:0;line-height:54px;left:var(--scl-spacing-24)}.data-grid--hide-border:not(.data-grid--mobile) .info__pagination{border-bottom:1px solid var(--scl-color-grey-10);border-right:1px solid var(--scl-color-grey-10)}.data-grid--mobile{border:none;background:none}.data-grid--mobile .data-grid__title-block{padding-left:0;padding-right:46px}.data-grid--hide-menu.data-grid--mobile .data-grid__title-block{padding-right:0}.data-grid--mobile .data-grid__settings-menu{right:0}.data-grid--mobile .data-grid__scroll-container{height:auto !important}.data-grid--mobile .data-grid__table{display:block;height:auto !important}.data-grid--mobile .thead{display:none}.data-grid--mobile .tbody{display:block}.data-grid--mobile .tbody__row{display:block;position:relative;white-space:initial;margin:0 0 var(--scl-spacing-8);padding:var(--scl-spacing-24);border-radius:var(--scl-radius-12);background:var(--scl-color-white);border:1px solid var(--scl-color-grey-10)}.data-grid--mobile .tbody__row:hover{background:var(--scl-color-white)}.data-grid--mobile .tbody__mobile-title{display:block;margin-bottom:var(--scl-spacing-8)}.data-grid--mobile .tbody__mobile-label{display:block}.data-grid--mobile .tbody__cell{display:flex;align-items:center;width:auto !important;padding:5px 0;margin:0;min-height:var(--scl-spacing-24);line-height:var(--scl-spacing-24);overflow:auto;overflow-x:hidden}.data-grid--mobile .tbody__cell--used-as-mobile-title{display:none}.data-grid--mobile .tbody__mobile-label{display:block;width:100px;flex-shrink:0;color:var(--scl-color-grey);font-size:var(--scl-font-size-12);font-weight:var(--scl-font-weight-medium)}.data-grid--mobile .tbody__cell:first-child{margin-left:0px}.data-grid--mobile .tbody__cell--selection{position:absolute;top:19px;right:12px}.data-grid--mobile .tbody__cell--numbered{position:absolute;top:19px;right:56px}.data-grid--mobile .tbody__cell scale-text-field,.data-grid--mobile .tbody__cell scale-dropdown{width:100%}.data-grid--mobile .tbody__nested{width:auto !important}.data-grid--mobile .tbody__nested-cell{padding:0;margin-bottom:var(--scl-spacing-8)}.data-grid--mobile.data-grid--shade-alternate .tbody__row:nth-of-type(even){background:none}.data-grid--mobile .info{height:auto;border-top:none;text-align:center}.data-grid--mobile .info__selection{position:relative;left:0}.sr-only{position:absolute;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;clip:rect(0, 0, 0, 0);white-space:nowrap;border-width:0}\";\n/* Reused Private Variables */\n\nvar resizeObserver;\nvar name = 'data-grid';\n\nvar DataGrid = /*#__PURE__*/function () {\n  /* 6. Lifecycle Events (call order) */\n  function DataGrid(hostRef) {\n    var _this = this;\n\n    _classCallCheck(this, DataGrid);\n\n    registerInstance(this, hostRef);\n    this.scaleEdit = createEvent(this, \"scale-edit\", 7);\n    this.scaleEditLegacy = createEvent(this, \"scaleEdit\", 7);\n    this.scaleSort = createEvent(this, \"scale-sort\", 7);\n    this.scaleSortLegacy = createEvent(this, \"scaleSort\", 7);\n    /* 2. State Variables (alphabetical) */\n\n    /** Used to force render after sorting/selection */\n\n    this.forceRender = 0;\n    /** Pagination starting index */\n\n    this.paginationStart = 0;\n    /** Table scroll value for frozen header  */\n\n    this.scrollY = 0;\n    /** (optional) Freeze header row from scrolling */\n\n    this.freezeHeader = false;\n    /** (optional) Heading string */\n\n    this.heading = '';\n    /** (optional) Set to true to remove border */\n\n    this.hideBorder = false;\n    /** (optional) Set to true to hide header row */\n\n    this.hideHeader = false;\n    /** (optional) Set to true to remove info footer block including pagination and selection status */\n\n    this.hideInfo = false;\n    /** (optional) Set to true to hide settings menu */\n\n    this.hideMenu = false;\n    /** (optional) Set to true to add numbers column */\n\n    this.numbered = false;\n    /** (optional) Set number of rows to display per pagination page */\n\n    this.pageSize = Infinity;\n    /** (optional) Set to true to add selection column */\n\n    this.selectable = false;\n    /** Read-only selection array - populated with raw data from selected rows */\n\n    this.selection = [];\n    /** (optional) Shade every second row darker */\n\n    this.shadeAlternate = true;\n    /** (optional) Set to false to hide table, used for nested tables to re-render upon toggle */\n\n    this.visible = true;\n    /** Stored active sorting column index, for state removal */\n\n    this.activeSortingIndex = -1;\n    /** Track component width to constrict nested content, which is necessary with table layout */\n\n    this.contentWidth = 100;\n    /** Flag to know to check for data completeness */\n\n    this.dataNeedsCheck = true;\n    /** Flag to know if rendering can commence */\n\n    this.hasData = false;\n    /** Flag that is true when width below a certain limit */\n\n    this.isMobile = false;\n    /** Flag that enough data supplied to warrant pagination */\n\n    this.isPagination = false;\n    /** Flag that is true if any fields are sortable */\n\n    this.isSortable = false;\n    /** Track container width to avoid re-calculating column stretching */\n\n    this.lastContainerWidth = 100;\n    /** Index of field to use as mobile title, if any */\n\n    this.mobileTitleIndex = -1;\n    /** Determine if auto-width parsing needed */\n\n    this.needsAutoWidthParse = false;\n    /** Force column resize after render */\n\n    this.needsColumnResize = false;\n    /** Auto-calculated number column width */\n\n    this.numberColumnWidth = 0;\n    /** Selection column width */\n\n    this.selectionColumnWidth = 22;\n\n    this.handleMenuListClick = function (event) {\n      var menuItems = ['sortBy', 'toggleVisibility'];\n      var currentMenuItemsIndex = menuItems.indexOf(event.target.id);\n\n      if (currentMenuItemsIndex > -1) {\n        // check if there is already opened flyout menu list with different id, if opened, close it\n        var inactiveMenuItem = _this.hostElement.shadowRoot.querySelector(\"#\".concat(menuItems[1 - currentMenuItemsIndex], \"List\"));\n\n        if (inactiveMenuItem) {\n          inactiveMenuItem.setAttribute('opened', 'false');\n        }\n      }\n    }; // Bind certain callbacks to scope\n\n\n    this.onDividerMove = this.onDividerMove.bind(this);\n    this.onDividerUp = this.onDividerUp.bind(this);\n    this.applyResponsiveClasses = this.applyResponsiveClasses.bind(this);\n    this.updateColumnStretching = this.updateColumnStretching.bind(this);\n  }\n\n  _createClass(DataGrid, [{\n    key: \"componentWillLoad\",\n    value: function componentWillLoad() {\n      this.fieldsHandler();\n      this.rowsHandler();\n    }\n  }, {\n    key: \"componentWillUpdate\",\n    value: function componentWillUpdate() {}\n  }, {\n    key: \"componentDidRender\",\n    value: function componentDidRender() {\n      var _this2 = this;\n\n      if (this.needsAutoWidthParse) {\n        this.calculateAutoWidths();\n      } // Wait a frame to avoid warning about possible infinite loop\n\n\n      setTimeout(function () {\n        if (_this2.needsColumnResize) {\n          _this2.updateColumnStretching();\n        }\n      });\n    }\n  }, {\n    key: \"componentDidLoad\",\n    value: function componentDidLoad() {\n      this.addResizeObserver();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {}\n  }, {\n    key: \"disconnectedCallback\",\n    value: function disconnectedCallback() {\n      this.removeResizeObserver();\n    }\n    /* 7. Listeners */\n\n  }, {\n    key: \"fieldsHandler\",\n    value: function fieldsHandler() {\n      this.parseFields();\n      this.checkForMobileTitle();\n      this.checkForSortableFields();\n      this.dataNeedsCheck = true;\n    }\n  }, {\n    key: \"rowsHandler\",\n    value: function rowsHandler() {\n      this.parseRows();\n      this.setInitialRowProps();\n      this.resetSortingToggle();\n      this.dataNeedsCheck = true; // Set flag to dirty to redo column width with new data\n\n      this.needsAutoWidthParse = true;\n      this.needsColumnResize = true;\n    }\n    /* 8. Public Methods */\n\n    /* 9. Local Methods */\n\n  }, {\n    key: \"parseFields\",\n    value: function parseFields() {\n      if (this.fields && typeof this.fields === 'string') {\n        this.fields = JSON.parse(this.fields);\n      }\n    }\n  }, {\n    key: \"parseRows\",\n    value: function parseRows() {\n      if (this.rows && typeof this.rows === 'string') {\n        this.rows = JSON.parse(this.rows);\n      }\n    }\n  }, {\n    key: \"setInitialRowProps\",\n    value: function setInitialRowProps() {\n      if (!this.rows || !this.rows.length) {\n        return;\n      }\n\n      this.rows.forEach(function (row, i) {\n        // Store indices of original order on rows for resetting sorting\n        row.initialIndex = i; // Set initial selected flag\n\n        row.selected = false;\n      }); // Determine if pagination will be required\n\n      this.isPagination = this.pageSize < this.rows.length;\n    }\n  }, {\n    key: \"checkHasData\",\n    value: function checkHasData() {\n      // Need both fields and data content in order to populate\n      if (!this.fields) {\n        return false;\n      }\n\n      for (var i = 0; i < this.fields.length; i++) {\n        // Use default type if none set\n        if (!this.fields[i].type) {\n          this.fields[i].type = DEFAULT_CELL_TYPE;\n        }\n\n        if (!CELL_TYPES[this.fields[i].type]) {\n          // tslint:disable-next-line: no-console\n          console.warn(\"Unrecognised field type: \\\"\".concat(this.fields[i].type, \"\\\"\"));\n          return false;\n        }\n      }\n\n      if (!this.rows || !this.rows.length) {\n        return false;\n      }\n\n      for (var _i = 0; _i < this.rows.length; _i++) {\n        if (this.rows[_i].length !== this.fields.length) {\n          // tslint:disable-next-line: no-console\n          console.warn(\"Unable to render \".concat(this.heading && \"\\\"\".concat(this.heading, \"\\\" \"), \"table: row data length not equal to supplied fields.\"));\n          return false;\n        }\n      }\n\n      return true;\n    }\n  }, {\n    key: \"checkForMobileTitle\",\n    value: function checkForMobileTitle() {\n      var _this3 = this;\n\n      // Reset for new data\n      this.mobileTitleIndex = -1;\n\n      if (!this.fields) {\n        return;\n      }\n\n      this.fields.every(function (_ref17, i) {\n        var mobileTitle = _ref17.mobileTitle;\n\n        if (mobileTitle) {\n          _this3.mobileTitleIndex = i;\n          return false;\n        }\n\n        return true;\n      });\n    }\n  }, {\n    key: \"checkForSortableFields\",\n    value: function checkForSortableFields() {\n      var _this4 = this;\n\n      this.isSortable = false;\n\n      if (!this.fields) {\n        return;\n      }\n\n      this.fields.forEach(function (_ref18) {\n        var sortable = _ref18.sortable;\n\n        if (sortable) {\n          _this4.isSortable = true;\n        }\n      });\n    }\n  }, {\n    key: \"getCssClassMap\",\n    value: function getCssClassMap() {\n      return classnames(name, !this.isMobile && \"\".concat(name, \"--desktop\"), this.isMobile && \"\".concat(name, \"--mobile\"), this.shadeAlternate && \"\".concat(name, \"--shade-alternate\"), this.freezeHeader && \"\".concat(name, \"--freeze-header\"), this.hideBorder && \"\".concat(name, \"--hide-border\"), this.hideMenu && \"\".concat(name, \"--hide-menu\"));\n    }\n  }, {\n    key: \"polyfillMousePosition\",\n    value: function polyfillMousePosition(e) {\n      // For touch\n      if (e.changedTouches && e.changedTouches.length) {\n        e.x = e.changedTouches[0].pageX;\n        e.y = e.changedTouches[0].pageY;\n      } // For cross browser support\n\n\n      if (e.x === undefined) {\n        e.x = e.clientX;\n        e.y = e.clientY;\n      }\n    }\n  }, {\n    key: \"getDefaultLongestContent\",\n    value: function getDefaultLongestContent(_ref19) {\n      var rows = _ref19.rows,\n          columnIndex = _ref19.columnIndex;\n      var maxLength = 0;\n      var longestContent;\n      rows.forEach(function (row) {\n        var length = row[columnIndex].toString().length;\n\n        if (length > maxLength) {\n          longestContent = row[columnIndex];\n          maxLength = length;\n        }\n      });\n      return longestContent;\n    } // Selection handlers\n\n  }, {\n    key: \"toggleSelectAll\",\n    value: function toggleSelectAll() {\n      var _this5 = this;\n\n      if (!this.elToggleSelectAll) {\n        return;\n      }\n\n      this.rows.forEach(function (row) {\n        return row.selected = _this5.elToggleSelectAll.checked;\n      });\n      this.updateReadableSelection();\n      this.forceRender++;\n    }\n  }, {\n    key: \"toggleRowSelect\",\n    value: function toggleRowSelect(_ref20, rowIndex) {\n      var target = _ref20.target;\n      this.rows[rowIndex].selected = target.checked;\n      this.updateReadableSelection();\n      this.forceRender++;\n    }\n  }, {\n    key: \"updateReadableSelection\",\n    value: function updateReadableSelection() {\n      var _this6 = this;\n\n      this.selection.length = 0;\n      this.rows.forEach(function (row) {\n        return row.selected && _this6.selection.push(row);\n      }); // Check header checkbox if any or none are selected\n\n      var selectAll = this.hostElement.shadowRoot.querySelector('.thead__cell--selection scale-checkbox');\n      selectAll.checked = !!this.selection.length; // selectAll.indeterminate = !!this.selection.length;\n    } // Sorting handlers\n\n  }, {\n    key: \"toggleTableSorting\",\n    value: function toggleTableSorting(sortDirection, columnIndex, type) {\n      // Remove sorting from previous column index\n      if (this.activeSortingIndex > -1 && this.activeSortingIndex !== columnIndex) {\n        this.fields[this.activeSortingIndex].sortDirection = 'none';\n      } // Store new column index\n\n\n      this.activeSortingIndex = columnIndex;\n      var newSortDirection = sortDirection === 'none' ? 'ascending' : sortDirection === 'ascending' ? 'descending' : 'none';\n      this.fields[columnIndex].sortDirection = newSortDirection;\n      this.sortTable(newSortDirection, type, columnIndex);\n    }\n  }, {\n    key: \"sortTable\",\n    value: function sortTable(sortDirection, type, columnIndex) {\n      if (sortDirection === 'none') {\n        this.rows.sort(function (a, b) {\n          return a.initialIndex - b.initialIndex;\n        });\n      } else {\n        switch (CELL_TYPES[type] && CELL_TYPES[type].defaults && CELL_TYPES[type].defaults.sortBy || CELL_DEFAULTS.sortBy) {\n          case 'text':\n            if (sortDirection === 'ascending') {\n              this.rows.sort(function (a, b) {\n                var textA = a[columnIndex].toLowerCase();\n                var textB = b[columnIndex].toLowerCase();\n                return textA < textB ? -1 : textA > textB ? 1 : 0;\n              });\n            } else {\n              this.rows.sort(function (a, b) {\n                var textA = a[columnIndex].toLowerCase();\n                var textB = b[columnIndex].toLowerCase();\n                return textA > textB ? -1 : textA < textB ? 1 : 0;\n              });\n            }\n\n            break;\n\n          case 'number':\n            if (sortDirection === 'ascending') {\n              this.rows.sort(function (a, b) {\n                return Number(a[columnIndex]) - Number(b[columnIndex]);\n              });\n            } else {\n              this.rows.sort(function (a, b) {\n                return Number(b[columnIndex]) - Number(a[columnIndex]);\n              });\n            }\n\n            break;\n        }\n      }\n\n      this.forceRender++; // Trigger event\n\n      this.triggerSortEvent(sortDirection, type, columnIndex);\n    }\n  }, {\n    key: \"resetSortingToggle\",\n    value: function resetSortingToggle() {\n      if (this.activeSortingIndex > -1) {\n        this.fields[this.activeSortingIndex].sortDirection = 'none';\n      }\n\n      this.activeSortingIndex = -1;\n    } // Column resize handlers\n\n  }, {\n    key: \"onDividerDown\",\n    value: function onDividerDown(e) {\n      this.polyfillMousePosition(e); // For touch -  Prevent mousedown firing, and native scroll\n\n      e.preventDefault(); // Store divider elem for use in move and end events\n\n      this.activeDivider = e.target; // Store initial value to calculate change\n\n      e.target.downX = e.x; // Reset to avoid reapplying previous change\n\n      this.activeDivider.interactiveWidth = 0;\n      window.addEventListener('mousemove', this.onDividerMove);\n      window.addEventListener('touchmove', this.onDividerMove);\n      window.addEventListener('mouseup', this.onDividerUp);\n      window.addEventListener('touchend', this.onDividerUp);\n    }\n  }, {\n    key: \"onDividerMove\",\n    value: function onDividerMove(e) {\n      // TODO: calculate width stretchWidth to drop in correct location\n      this.polyfillMousePosition(e);\n      var _this$activeDivider$d = this.activeDivider.dataset,\n          width = _this$activeDivider$d.width,\n          min = _this$activeDivider$d.min,\n          max = _this$activeDivider$d.max;\n      var diff = e.x - this.activeDivider.downX;\n      var newWidth = Math.min(Number(max), Math.max(Number(min), Number(width) + diff));\n      var adjustedDiff = newWidth - Number(width);\n      this.activeDivider.interactiveWidth = newWidth; // Give immediate visual feedback\n\n      this.activeDivider.style.transform = \"translateX(\".concat(adjustedDiff, \"px)\");\n    }\n  }, {\n    key: \"onDividerUp\",\n    value: function onDividerUp() {\n      var index = this.activeDivider.dataset.index; // Store new width on the field data\n\n      if (this.activeDivider.interactiveWidth) {\n        this.fields[Number(index)].width = this.activeDivider.interactiveWidth;\n      } // Reset visual feedback\n\n\n      this.activeDivider.style.transform = \"translateX(0px)\";\n      window.removeEventListener('mousemove', this.onDividerMove);\n      window.removeEventListener('touchmove', this.onDividerMove);\n      window.removeEventListener('mouseup', this.onDividerUp);\n      window.removeEventListener('touchend', this.onDividerUp); // Update column stretching before rendering\n\n      this.needsColumnResize = true;\n      this.updateColumnStretching(); // Render to apply change\n\n      this.forceRender++;\n    } // Column visibility toggle handlers\n\n  }, {\n    key: \"toggleVisibilityMenu\",\n    value: function toggleVisibilityMenu(e) {\n      e.preventDefault(); // TODO: replace this with contextual menu component, when available\n\n      var visibilityToggle = this.hostElement.shadowRoot.querySelector('.visibility-toggle');\n      var menu = visibilityToggle.children[1]; // By default\n\n      if (visibilityToggle.style.display === 'none') {\n        visibilityToggle.style.display = 'block';\n        menu.style.transform = \"translate(\".concat(e.clientX, \"px, \").concat(e.clientY, \"px)\");\n      } else {\n        visibilityToggle.style.display = 'none';\n      }\n    }\n  }, {\n    key: \"toggleColumnVisibility\",\n    value: function toggleColumnVisibility(value, columnIndex) {\n      this.fields[columnIndex].visible = value;\n      this.forceRender++; // Update column stretching\n\n      this.needsColumnResize = true;\n      this.updateColumnStretching();\n    } // Resize handlers\n\n  }, {\n    key: \"addResizeObserver\",\n    value: function addResizeObserver() {\n      if (!resizeObserver) {\n        // @ts-ignore\n        resizeObserver = new ResizeObserver(function (entries) {\n          var _iterator = _createForOfIteratorHelper(entries),\n              _step;\n\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var entry = _step.value;\n\n              // Skip if table not visible/attached\n              if (entry.target.offsetParent === null) {\n                return;\n              }\n\n              entry.target.applyResponsiveClasses(entry);\n              entry.target.updateColumnStretching();\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n        });\n      }\n\n      this.elMmainContainer = this.hostElement.shadowRoot.querySelector(\".\".concat(name)); // Add this instance's callbacks, as resizeObserver is reused\n\n      this.elMmainContainer.applyResponsiveClasses = this.applyResponsiveClasses;\n      this.elMmainContainer.updateColumnStretching = this.updateColumnStretching;\n      resizeObserver.observe(this.elMmainContainer);\n    }\n  }, {\n    key: \"removeResizeObserver\",\n    value: function removeResizeObserver() {\n      if (this.elMmainContainer) {\n        resizeObserver.unobserve(this.elMmainContainer);\n      }\n    }\n  }, {\n    key: \"applyResponsiveClasses\",\n    value: function applyResponsiveClasses() {\n      // Apply container-scoped media-query-style classes\n      var newIsMobile = this.elMmainContainer.offsetWidth <= 500;\n\n      if (this.isMobile !== newIsMobile) {\n        this.forceRender++;\n      }\n\n      this.isMobile = newIsMobile;\n    }\n  }, {\n    key: \"updateColumnStretching\",\n    value: function updateColumnStretching() {\n      var _this7 = this;\n\n      // NOTE: any styling padding/margin width changes need to be adjusted here as well\n      // Ignore auto-width-check content renders\n      if (this.needsAutoWidthParse) {\n        return;\n      }\n\n      var container = this.elMmainContainer; // Minus 2 for border\n\n      var containerWidth = container.offsetWidth - 2;\n      var hasContainerWidthChanged = this.lastContainerWidth !== containerWidth; // If width hasn't changed, don't re-calculate\n\n      if (!hasContainerWidthChanged && !this.needsColumnResize) {\n        return;\n      }\n\n      this.needsColumnResize = false;\n      this.lastContainerWidth = containerWidth; // Don't calculate when mobile layout\n\n      if (container.offsetWidth <= 500) {\n        return;\n      } // The theoretical target width - ignoring any previously applied stretching\n\n\n      var targetContentWidth = function () {\n        var total = 0; // Extra margin on first column\n\n        total += 8;\n\n        if (_this7.numbered) {\n          // 32 for padding+margin\n          total += _this7.numberColumnWidth + 32; // this.selectionColumnWidth;\n        }\n\n        if (_this7.selectable) {\n          // 32 for padding+margin\n          total += _this7.selectionColumnWidth + 32; // If both selectable and numbered - adjust for reduced margin between\n\n          if (_this7.numbered) {\n            total -= 16;\n          }\n        } // Add each visible column's target width\n\n\n        _this7.fields.forEach(function (_ref21) {\n          var _ref21$visible = _ref21.visible,\n              visible = _ref21$visible === void 0 ? true : _ref21$visible,\n              width = _ref21.width;\n\n          if (visible) {\n            // 32 for padding+margin\n            total += width + 32;\n          }\n        });\n\n        return total;\n      }(); // Update value passed to nested content to overcome table display layout\n\n\n      this.contentWidth = Math.max(targetContentWidth, containerWidth);\n      var diff = containerWidth - targetContentWidth;\n\n      if (diff <= 0) {\n        // content larger than container (scrollbar), remove all stretching\n        this.fields.forEach(function (field) {\n          return field.stretchWidth = 0;\n        });\n      } else {\n        // container larger than content (gap to the right), calculate stretching\n        // If stretchWeight set, divide value between total to get final weight\n        // If stretchWeight unset, share remainder of 1 (if any) between all unset cols\n        var totalSetWeight = 0;\n        var unsetColsCount = 0;\n        this.fields.forEach(function (_ref22) {\n          var _ref22$visible = _ref22.visible,\n              visible = _ref22$visible === void 0 ? true : _ref22$visible,\n              stretchWeight = _ref22.stretchWeight;\n\n          // Disregard invisible columns\n          if (!visible) {\n            return;\n          }\n\n          if (typeof stretchWeight === 'number') {\n            totalSetWeight += stretchWeight;\n          } else {\n            unsetColsCount++;\n          }\n        });\n        var remainderWeight = Math.max(0, 1 - totalSetWeight); // Set total to be divided against to be above 1 to keep total set/unset weights equal to 1\n\n        totalSetWeight = Math.max(1, totalSetWeight);\n        this.fields.forEach(function (field) {\n          var _field$visible = field.visible,\n              visible = _field$visible === void 0 ? true : _field$visible,\n              stretchWeight = field.stretchWeight;\n\n          if (!visible) {\n            return;\n          } // Actual stretch weight, out of a total 1 for all columns\n\n\n          var weight = 0;\n\n          if (typeof stretchWeight === 'number') {\n            weight = stretchWeight / totalSetWeight;\n          } else if (remainderWeight > 0) {\n            weight = remainderWeight / unsetColsCount;\n          } // Apply stretching with the weight percentage\n\n\n          field.stretchWidth = diff * weight;\n        });\n      }\n\n      this.forceRender++;\n    } // Auto column width handlers\n\n  }, {\n    key: \"calculateAutoWidths\",\n    value: function calculateAutoWidths() {\n      var _this8 = this;\n\n      var isVisible = false;\n      var columns = this.hostElement.shadowRoot.querySelectorAll(\".\".concat(name, \"__auto-width-check td\"));\n      columns.forEach(function (cell) {\n        // Make sure table is actually rendered (eg not display:none etc)\n        if (!isVisible && cell.offsetParent !== null) {\n          isVisible = true;\n        }\n\n        if (!isVisible) {\n          return;\n        } // Update field width with that of largest content\n\n\n        _this8.fields[cell.dataset.columnindex].width = cell.clientWidth;\n      });\n\n      if (!isVisible) {\n        return;\n      } // Wrap in setTimeout to avoid warning about forcing render within render callback\n\n\n      setTimeout(function () {\n        _this8.needsAutoWidthParse = false;\n        _this8.forceRender++;\n      });\n    } // Event triggers\n\n  }, {\n    key: \"triggerSortEvent\",\n    value: function triggerSortEvent(sortDirection, type, columnIndex) {\n      var data = {\n        rows: this.rows,\n        type: type,\n        sortDirection: sortDirection,\n        columnIndex: columnIndex\n      };\n      emitEvent(this, 'scaleSort', data);\n    }\n  }, {\n    key: \"triggerEditEvent\",\n    value: function triggerEditEvent(value, rowIndex, columnIndex) {\n      var data = {\n        rows: this.rows,\n        rowIndex: rowIndex,\n        columnIndex: columnIndex,\n        value: value\n      };\n      emitEvent(this, 'scaleEdit', data); // Force render for checkboxes\n\n      this.forceRender++;\n    }\n  }, {\n    key: \"onTableScroll\",\n    value: function onTableScroll() {\n      if (!this.freezeHeader || this.hideHeader) {\n        return;\n      } // Freeze header\n\n\n      var scrollY = this.elScrollContainer.scrollTop;\n      this.elTableHead.style.transform = \"translateY(\".concat(scrollY, \"px)\");\n    }\n  }, {\n    key: \"renderSettingsMenu\",\n    value: function renderSettingsMenu() {\n      var _this9 = this;\n\n      return h(\"scale-menu-flyout\", {\n        class: \"\".concat(name, \"__settings-menu\")\n      }, h(\"scale-button\", {\n        slot: \"trigger\",\n        variant: \"secondary\",\n        \"icon-only\": true,\n        \"data-sortable\": this.isSortable\n      }, h(\"scale-icon-service-settings\", {\n        accessibilityTitle: \"Table options\"\n      })), h(\"scale-menu-flyout-list\", null, this.isSortable && h(\"scale-menu-flyout-item\", {\n        id: \"sortBy\",\n        onClick: this.handleMenuListClick\n      }, h(\"scale-icon-action-sort\", {\n        slot: \"prefix\"\n      }), \"Sort By\", h(\"scale-menu-flyout-list\", {\n        slot: \"sublist\",\n        id: \"sortByList\"\n      }, this.fields.map(function (_ref23, columnIndex) {\n        var label = _ref23.label,\n            type = _ref23.type,\n            sortable = _ref23.sortable,\n            _ref23$sortDirection = _ref23.sortDirection,\n            sortDirection = _ref23$sortDirection === void 0 ? 'none' : _ref23$sortDirection;\n\n        if (!sortable) {\n          return '';\n        }\n\n        return h(\"scale-menu-flyout-item\", {\n          \"onScale-select\": function onScaleSelect() {\n            return _this9.toggleTableSorting(sortDirection, columnIndex, type);\n          }\n        }, sortDirection === 'ascending' && h(\"scale-icon-navigation-collapse-up\", {\n          size: 16,\n          slot: \"prefix\"\n        }), sortDirection === 'descending' && h(\"scale-icon-navigation-collapse-down\", {\n          size: 16,\n          slot: \"prefix\"\n        }), sortDirection === 'none' && h(\"scale-icon-navigation-collapse-up\", {\n          size: 16,\n          slot: \"prefix\",\n          style: {\n            opacity: '0'\n          }\n        }), label || type);\n      }))), h(\"scale-menu-flyout-item\", {\n        id: \"toggleVisibility\",\n        onClick: this.handleMenuListClick\n      }, h(\"scale-icon-action-hide-password\", {\n        slot: \"prefix\"\n      }), \"Toggle Visibility\", h(\"scale-menu-flyout-list\", {\n        slot: \"sublist\",\n        \"close-on-select\": \"false\",\n        id: \"toggleVisibilityList\"\n      }, this.fields.map(function (_ref24, columnIndex) {\n        var label = _ref24.label,\n            type = _ref24.type,\n            _ref24$visible = _ref24.visible,\n            visible = _ref24$visible === void 0 ? CELL_TYPES[type].defaults.visible !== undefined ? CELL_TYPES[type].defaults.visible : CELL_DEFAULTS.visible : _ref24$visible;\n        return h(\"scale-menu-flyout-item\", {\n          checkable: \"checkbox\",\n          checked: !!visible,\n          \"onScale-select\": function onScaleSelect() {\n            return _this9.toggleColumnVisibility(!visible, columnIndex);\n          }\n        }, label || type);\n      }))), this.selectable && h(\"scale-menu-flyout-item\", {\n        \"onScale-select\": function onScaleSelect() {\n          _this9.elToggleSelectAll.checked = !_this9.elToggleSelectAll.checked;\n\n          _this9.toggleSelectAll();\n        }\n      }, h(\"scale-icon\", {\n        slot: \"prefix\",\n        path: \"M20.9328 10.6668C20.5132 10.6668 20.1731 11.0069 20.1731 11.4265V20.3269H1.5194V1.67309H16.5049C16.9245 1.67309 17.2646 1.33292 17.2646 0.913386C17.2646 0.49385 16.9245 0.153687 16.5049 0.153687H0.759699C0.340163 0.153687 0 0.49385 0 0.913386V21.0866C0 21.5062 0.340163 21.8463 0.759699 21.8463H20.9328C21.3523 21.8463 21.6925 21.5062 21.6925 21.0866V11.4265C21.6925 11.0069 21.3524 10.6668 20.9328 10.6668ZM23.7774 0.653387C23.4807 0.356739 22.9997 0.356739 22.703 0.653387L10.3293 13.0272L7.25501 9.9529C6.9583 9.65625 6.47732 9.65625 6.18061 9.9529C5.88396 10.2496 5.88396 10.7306 6.18061 11.0273L9.7921 14.6388C9.94045 14.7871 10.1349 14.8613 10.3293 14.8613C10.5237 14.8613 10.7181 14.7871 10.8665 14.6388L23.7774 1.72778C24.0741 1.43108 24.0741 0.950095 23.7774 0.653387Z\"\n      }), \"Select / Deselect All\"), h(\"slot\", {\n        name: \"menu\"\n      })));\n    }\n  }, {\n    key: \"renderTable\",\n    value: function renderTable() {\n      var _this10 = this;\n\n      if (this.needsAutoWidthParse) {\n        return this.renderAutoWidthCheck();\n      }\n\n      return h(\"div\", {\n        ref: function ref(el) {\n          return _this10.elScrollContainer = el;\n        },\n        class: \"\".concat(name, \"__scroll-container\"),\n        style: {\n          height: this.height || 'auto'\n        },\n        onScroll: function onScroll() {\n          return _this10.onTableScroll();\n        }\n      }, h(\"table\", {\n        class: \"\".concat(name, \"__table\")\n      }, this.renderTableHead(), this.renderTableBody()));\n    }\n  }, {\n    key: \"renderAutoWidthCheck\",\n    value: function renderAutoWidthCheck() {\n      var _this11 = this;\n\n      // Calculate number column width\n      this.numberColumnWidth = this.rows.length.toString().length * 9; // Get columns with width option set to 'auto'\n\n      var autoCols = [];\n      this.fields.forEach(function (_ref25, columnIndex) {\n        var type = _ref25.type,\n            _ref25$width = _ref25.width,\n            width = _ref25$width === void 0 ? CELL_TYPES[type].defaults.width || CELL_DEFAULTS.width : _ref25$width;\n\n        if (width === 'auto') {\n          autoCols.push(columnIndex);\n        }\n      });\n\n      if (!autoCols.length) {\n        this.needsAutoWidthParse = false;\n        return this.renderTable();\n      }\n\n      return h(\"table\", {\n        class: \"\".concat(name, \"__auto-width-check \").concat(name, \"__table\")\n      }, h(\"tr\", {\n        class: \"tbody__row\"\n      }, autoCols.map(function (columnIndex) {\n        var field = _this11.fields[columnIndex];\n        var type = field.type,\n            _field$cell = field.cell,\n            cell = _field$cell === void 0 ? CELL_TYPES[type] : _field$cell; // Find largest content of each type. Use custom getter if exists\n\n        var getLongestContent = cell.getLongestContent || _this11.getDefaultLongestContent;\n        var content = getLongestContent({\n          rows: _this11.rows,\n          columnIndex: columnIndex,\n          field: field\n        });\n        return h(\"td\", {\n          class: \"tbody__cell\",\n          style: {\n            width: 'auto'\n          },\n          \"data-columnindex\": columnIndex\n        }, cell.render({\n          field: field,\n          content: content,\n          component: _this11,\n          isAutoWidthCheck: true\n        }));\n      })));\n    }\n  }, {\n    key: \"renderTableHead\",\n    value: function renderTableHead() {\n      var _this12 = this;\n\n      return h(\"thead\", {\n        ref: function ref(el) {\n          return _this12.elTableHead = el;\n        },\n        class: \"thead \".concat(this.hideHeader ? 'sr-only' : '')\n      }, h(\"tr\", {\n        class: \"thead__row\"\n      }, this.numbered && this.renderTableHeadNumberedCell(), this.selectable && this.renderTableHeadSelectableCell(), this.fields.map(function (_ref26, columnIndex) {\n        var type = _ref26.type,\n            _ref26$label = _ref26.label,\n            label = _ref26$label === void 0 ? '' : _ref26$label,\n            _ref26$visible = _ref26.visible,\n            visible = _ref26$visible === void 0 ? CELL_TYPES[type].defaults.visible !== undefined ? CELL_TYPES[type].defaults.visible : CELL_DEFAULTS.visible : _ref26$visible,\n            sortable = _ref26.sortable,\n            _ref26$sortDirection = _ref26.sortDirection,\n            sortDirection = _ref26$sortDirection === void 0 ? 'none' : _ref26$sortDirection,\n            _ref26$resizable = _ref26.resizable,\n            resizable = _ref26$resizable === void 0 ? CELL_TYPES[type].defaults.resizable !== undefined ? CELL_TYPES[type].defaults.resizable : CELL_DEFAULTS.resizable : _ref26$resizable,\n            _ref26$width = _ref26.width,\n            width = _ref26$width === void 0 ? CELL_TYPES[type].defaults.width || CELL_DEFAULTS.width : _ref26$width,\n            _ref26$minWidth = _ref26.minWidth,\n            minWidth = _ref26$minWidth === void 0 ? CELL_TYPES[type].defaults.minWidth || CELL_DEFAULTS.minWidth : _ref26$minWidth,\n            _ref26$maxWidth = _ref26.maxWidth,\n            maxWidth = _ref26$maxWidth === void 0 ? CELL_TYPES[type].defaults.maxWidth || CELL_DEFAULTS.maxWidth : _ref26$maxWidth,\n            _ref26$textAlign = _ref26.textAlign,\n            textAlign = _ref26$textAlign === void 0 ? CELL_TYPES[type].defaults.textAlign || CELL_DEFAULTS.textAlign : _ref26$textAlign,\n            _ref26$stretchWidth = _ref26.stretchWidth,\n            stretchWidth = _ref26$stretchWidth === void 0 ? 0 : _ref26$stretchWidth;\n\n        if (!visible) {\n          return;\n        }\n\n        var props = {\n          class: \"thead__cell\",\n          style: {\n            width: \"calc(\".concat(width, \"px + \").concat(stretchWidth, \"px)\"),\n            textAlign: textAlign\n          },\n          'data-type': type\n        };\n\n        if (sortable) {\n          props['aria-sort'] = sortDirection;\n        }\n\n        return h(\"th\", Object.assign({\n          title: \"Activate to sort column\"\n        }, props, sortable ? {\n          onKeyDown: function onKeyDown(event) {\n            if (['Enter', ' '].includes(event.key)) {\n              _this12.toggleTableSorting(sortDirection, columnIndex, type);\n            }\n          },\n          onClick: function onClick() {\n            _this12.toggleTableSorting(sortDirection, columnIndex, type);\n          },\n          tabindex: 0,\n          class: \"\".concat(props.class, \" thead-sortable\")\n        } : {}), h(\"div\", {\n          class: \"thead__title\"\n        }, h(\"span\", {\n          class: \"thead__text\"\n        }, sortable && h(\"span\", {\n          class: \"thead__arrow-top\"\n        }), sortable && h(\"span\", {\n          class: \"thead__arrow-bottom\"\n        }), label)), resizable && h(\"div\", {\n          class: \"thead__divider\",\n          \"data-index\": columnIndex,\n          \"data-width\": width,\n          \"data-min\": minWidth,\n          \"data-max\": maxWidth,\n          onMouseDown: function onMouseDown(e) {\n            return _this12.onDividerDown(e);\n          },\n          onTouchStart: function onTouchStart(e) {\n            return _this12.onDividerDown(e);\n          },\n          \"aria-hidden\": \"true\"\n        }, h(\"div\", {\n          class: \"thead__divider-line\"\n        })));\n      })));\n    }\n  }, {\n    key: \"renderTableHeadNumberedCell\",\n    value: function renderTableHeadNumberedCell() {\n      return h(\"th\", {\n        class: \"thead__cell  thead__cell--numbered\",\n        style: {\n          width: this.numberColumnWidth + 'px'\n        }\n      }, h(\"span\", {\n        class: \"scl-body\"\n      }, \"#\"));\n    }\n  }, {\n    key: \"renderTableHeadSelectableCell\",\n    value: function renderTableHeadSelectableCell() {\n      var _this13 = this;\n\n      var style = {\n        width: this.selectionColumnWidth + 'px'\n      }; // Make selection and numbered cells closer than regular padding\n\n      if (this.numbered) {\n        style.paddingLeft = '0px';\n      }\n\n      return h(\"th\", {\n        class: \"thead__cell thead__cell--selection\",\n        style: style,\n        title: \"Select\"\n      }, h(\"scale-checkbox\", {\n        ref: function ref(el) {\n          return _this13.elToggleSelectAll = el;\n        },\n        onScaleChange: function onScaleChange() {\n          return _this13.toggleSelectAll();\n        },\n        hideLabel: true,\n        \"aria-label\": \"Select\"\n      }));\n    }\n  }, {\n    key: \"renderTableBody\",\n    value: function renderTableBody() {\n      var _this14 = this;\n\n      return h(\"tbody\", {\n        class: \"tbody\"\n      }, function () {\n        var rows = []; // Pagination functionality\n\n        var total = _this14.rows.length;\n        var start = _this14.paginationStart;\n        var end = Math.min(total, _this14.paginationStart + _this14.pageSize);\n\n        var _loop = function _loop(rowIndex) {\n          var rowData = _this14.rows[rowIndex];\n          var rowNestedContent = [];\n          var isNestedExpanded = false;\n          rows.push(h(\"tr\", {\n            class: \"tbody__row\"\n          }, _this14.renderMobileTitle(rowData), _this14.numbered && _this14.renderTableBodyNumberedCell(rowIndex), _this14.selectable && _this14.renderTableBodySelectableCell(rowIndex), rowData.map(function (cellContent, columnIndex) {\n            var field = _this14.fields[columnIndex];\n            var visible = field.visible !== undefined ? field.visible : CELL_TYPES[field.type].defaults.visible !== undefined ? CELL_TYPES[field.type].defaults.visible : CELL_DEFAULTS.visible;\n\n            if (!visible) {\n              return;\n            } // Add rows nested tables to array\n\n\n            if (field.type === 'html') {\n              if (!!cellContent.isExpanded) {\n                isNestedExpanded = true;\n              }\n\n              rowNestedContent.push({\n                content: cellContent\n              });\n            }\n\n            return _this14.renderTableCell(field, cellContent, rowIndex, columnIndex);\n          }))); // Add second row for nested content if any within the row are expanded\n\n          if (rowNestedContent.length) {\n            rows.push(h(\"div\", {\n              class: \"tbody__nested\",\n              style: {\n                width: _this14.contentWidth + 'px',\n                display: isNestedExpanded ? 'block' : 'none'\n              }\n            }, h(\"td\", {\n              class: \"tbody__nested-cell\"\n            }, rowNestedContent.map(function (_ref27) {\n              var content = _ref27.content;\n              return h(\"div\", {\n                ref: function ref(el) {\n                  if (el) {\n                    // Remove content from other pages\n                    var child = el.lastElementChild;\n\n                    while (child) {\n                      el.removeChild(child);\n                      child = el.lastElementChild;\n                    } // Append actual content\n\n\n                    el.appendChild(content);\n                  }\n                }\n              });\n            }))));\n          }\n        };\n\n        for (var rowIndex = start; rowIndex < end; rowIndex++) {\n          _loop(rowIndex);\n        }\n\n        return rows;\n      }());\n    }\n  }, {\n    key: \"renderMobileTitle\",\n    value: function renderMobileTitle(rowData) {\n      if (this.mobileTitleIndex === -1) {\n        return h(\"h5\", {\n          class: \"tbody__mobile-title scl-h5\"\n        }, \"\\xA0\");\n      }\n\n      return h(\"h5\", {\n        class: \"tbody__mobile-title scl-h5\"\n      }, rowData[this.mobileTitleIndex]);\n    }\n  }, {\n    key: \"renderTableBodyNumberedCell\",\n    value: function renderTableBodyNumberedCell(rowIndex) {\n      return h(\"td\", {\n        class: \"tbody__cell tbody__cell--numbered\",\n        style: {\n          width: this.numberColumnWidth + 'px'\n        }\n      }, h(\"p\", {\n        class: \"scl-body\"\n      }, rowIndex + 1));\n    }\n  }, {\n    key: \"renderTableBodySelectableCell\",\n    value: function renderTableBodySelectableCell(rowIndex) {\n      var _this15 = this;\n\n      var style = {\n        width: this.selectionColumnWidth + 'px'\n      };\n\n      if (this.numbered) {\n        style.marginLeft = '0px';\n        style.paddingLeft = '0px';\n      }\n\n      return h(\"td\", {\n        title: this.rows[rowIndex][0],\n        class: \"tbody__cell tbody__cell--selection\",\n        style: style\n      }, h(\"scale-checkbox\", {\n        checked: this.rows[rowIndex].selected,\n        onScaleChange: function onScaleChange(e) {\n          return _this15.toggleRowSelect(e, rowIndex);\n        },\n        hideLabel: true\n      }));\n    }\n  }, {\n    key: \"renderTableCell\",\n    value: function renderTableCell(field, content, rowIndex, columnIndex) {\n      var cell = CELL_TYPES[field.type];\n      var label = field.label,\n          _field$width = field.width,\n          width = _field$width === void 0 ? cell.defaults.width || CELL_DEFAULTS.width : _field$width,\n          _field$stretchWidth = field.stretchWidth,\n          stretchWidth = _field$stretchWidth === void 0 ? 0 : _field$stretchWidth,\n          mobileTitle = field.mobileTitle;\n      return h(\"td\", {\n        class: \"tbody__cell\".concat(mobileTitle ? \" tbody__cell--used-as-mobile-title\" : \"\"),\n        style: {\n          width: \"calc(\".concat(width, \"px + \").concat(stretchWidth, \"px)\")\n        }\n      }, h(\"div\", {\n        class: \"tbody__mobile-label\"\n      }, label), cell.render({\n        field: field,\n        content: content,\n        component: this,\n        rowIndex: rowIndex,\n        columnIndex: columnIndex\n      }));\n    }\n  }, {\n    key: \"renderTableInfo\",\n    value: function renderTableInfo() {\n      var _this16 = this;\n\n      return h(\"div\", {\n        class: \"info\"\n      }, this.selectable && !!this.selection.length && h(\"div\", {\n        class: \"info__selection\"\n      }, \"\".concat(this.selection.length, \" row\").concat(this.selection.length > 1 ? 's' : '', \" selected\")), this.isPagination && h(\"scale-pagination\", {\n        class: \"info__pagination\",\n        hideBorders: !this.isMobile,\n        startElement: this.paginationStart,\n        totalElements: this.rows.length,\n        pageSize: this.pageSize,\n        onScalePagination: function onScalePagination(_ref28) {\n          var detail = _ref28.detail;\n          return _this16.paginationStart = detail.startElement;\n        }\n      }));\n    }\n    /* 10. Render */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (this.dataNeedsCheck) {\n        this.hasData = this.checkHasData();\n      }\n\n      return h(Host, {\n        style: {\n          display: this.visible ? 'block' : 'none'\n        }\n      }, this.styles && h(\"style\", null, this.styles), h(\"div\", {\n        class: this.getCssClassMap()\n      }, h(\"div\", {\n        class: \"\".concat(name, \"__title-block\")\n      }, this.heading && h(\"h4\", {\n        class: \"\".concat(name, \"__heading scl-h5\")\n      }, this.heading), h(\"div\", null, h(\"slot\", null)), this.hasData && this.renderSettingsMenu()), this.hasData && this.renderTable(), this.hasData && !this.hideInfo && !this.needsAutoWidthParse && (this.selectable || this.isPagination) && this.renderTableInfo()));\n    }\n  }, {\n    key: \"hostElement\",\n    get: function get() {\n      return getElement(this);\n    }\n  }], [{\n    key: \"watchers\",\n    get: function get() {\n      return {\n        \"fields\": [\"fieldsHandler\"],\n        \"rows\": [\"rowsHandler\"]\n      };\n    }\n  }]);\n\n  return DataGrid;\n}();\n\nDataGrid.style = dataGridCss;\nexport { DataGrid as scale_data_grid };","map":null,"metadata":{},"sourceType":"module"}