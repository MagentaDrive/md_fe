{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Thomas\\\\Desktop\\\\md_fe\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"C:\\\\Users\\\\Thomas\\\\Desktop\\\\md_fe\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport { r as registerInstance, c as createEvent, h, a as Host, g as getElement } from './index-f2e5998d.js';\nimport { e as emitEvent } from './utils-524c237e.js';\nimport { s as statusNote } from './status-note-d227f142.js';\nvar ratingStarsCss = \":host{--stars-color:var(--scl-color-primary);--stars-hover-color:var(--scl-color-primary-hover);--stars-active-color:var(--scl-color-primary-active);--stars-inactive-color:transparent;--stars-placeholder-color:var(--scl-color-grey-90);--stars-placeholder-revert-color:var(--scl-color-grey-90);--stars-disabled-color:var(--scl-color-grey-50);--stars-spacing:var(--scl-spacing-2);--stars-transition:color 0.1s;--stars-size:24px;--font-weight-medium:var(--scl-font-weight-medium);--font-size-small:var(--scl-font-size-12);--infotext-color:var(--scl-color-text-additional)}:host([star-size='small']){--stars-size:16px;font-size:var(--font-size-small)}[part='container']{display:inline-flex;flex-direction:column;position:relative}[part='range-slider']{position:absolute;border:0;margin:0;left:calc(-1 * var(--stars-size));bottom:0;z-index:2;width:calc(100% + var(--stars-size) * 2);opacity:0;height:var(--stars-size)}@media (hover: hover){[part='range-slider']{clip:rect(0 0 0 0);clip-path:inset(50%);height:1px;overflow:hidden;white-space:nowrap;width:1px}}input[type='range']::-webkit-slider-thumb{-webkit-appearance:none;border:0;height:var(--stars-size);width:var(--stars-size);border-radius:50%;background:#ffffff;cursor:pointer;margin-left:0px;margin-top:0}[part='content']{display:flex}[part='wrapper']{display:inline-flex;border-radius:var(--scl-spacing-4);margin-left:calc(-1 * var(--stars-spacing))}[part='wrapper']:hover [part='star'] [part='selected-star']{opacity:1}[part='star']>*{pointer-events:none}[part='label']{margin-bottom:var(--scl-spacing-8);white-space:nowrap}[part='infotext']{margin-left:var(--scl-spacing-8);display:flex;align-items:center;font-weight:var(--font-weight-medium);color:var(--infotext-color);white-space:nowrap}[part='star']{--decimal-width:100%;display:inline-flex;position:relative;color:var(--stars-color);cursor:pointer;padding:0 var(--stars-spacing)}[part='placeholder-star']{display:inline-flex;color:var(--stars-placeholder-color);transition:var(--stars-transition)}[part='selected-star']{color:var(--stars-inactive-color);margin-left:0px;position:relative;transition:var(--stars-transition)}.icon-clip{overflow:hidden;position:absolute;width:var(--decimal-width);height:100%}[part='star'][data-half]{--decimal-width:calc(50% - var(--stars-spacing))}[part='star'][data-selected]{--stars-placeholder-color:transparent}[part='star'][data-half]{--stars-placeholder-color:currentColor}[part='star'][data-selected] [part='selected-star']{color:var(--stars-color)}@media (hover: hover){[part='wrapper']:hover{--stars-color:var(--stars-hover-color);--stars-placeholder-color:transparent}[part='wrapper']:hover [part='star']{--decimal-width:100%}[part='wrapper']:hover [part='star'][data-half]{--stars-placeholder-color:transparent}[part='wrapper']:hover [part='selected-star']{color:var(--stars-color)}[part='star']:hover~[part='star'] [part='selected-star']{color:var(--stars-inactive-color)}[part='star']:hover~[part='star'] [part='placeholder-star']{--stars-placeholder-color:var(--stars-placeholder-revert-color)}}[part='wrapper']:active{--stars-color:var(--stars-active-color)}:host(:focus-within) [part='wrapper'],[part='wrapper']:focus{box-shadow:0 0 0 var(--scl-spacing-2) var(--scl-color-focus);outline:none}:host(.readonly) [part='wrapper']{--stars-placeholder-color:var(--stars-disabled-color);pointer-events:none}:host(.disabled) [part='label'],:host(.disabled) [part='infotext']{color:var(--stars-disabled-color)}:host(.disabled) [part='wrapper']{--stars-color:var(--stars-disabled-color);--stars-placeholder-color:var(--stars-disabled-color);pointer-events:none}:host(.hideLabel) [part='label']{visibility:hidden;height:0;margin-bottom:0}@media screen and (forced-colors: active), (-ms-high-contrast: active){[part='star'] [part='placeholder-star']{color:var(--scl-color-white)}[part='star'][data-selected] [part='placeholder-star']{color:var(--stars-inactive-color)}[part='star']:hover~[part='star'] [part='placeholder-star']{color:var(--scl-color-white)}[part='wrapper']:hover [part='placeholder-star']{color:var(--stars-inactive-color)}}\";\nvar sizes = {\n  small: 16,\n  large: 24\n};\nvar ratingStarCount = 0;\n\nvar RatingStars = /*#__PURE__*/function () {\n  function RatingStars(hostRef) {\n    var _this = this;\n\n    _classCallCheck(this, RatingStars);\n\n    registerInstance(this, hostRef);\n    this.scaleChange = createEvent(this, \"scale-change\", 7);\n    this.scaleChangeLegacy = createEvent(this, \"scaleChange\", 7);\n    this.ratingStarId = \"scale-rating-star-\".concat(ratingStarCount++);\n    /** @deprecated; size should be used instead of starSize */\n\n    this.starSize = 'large';\n    /** size of the stars  */\n\n    this.size = 'large';\n    /** @deprecated; The lower limit of the rating */\n\n    this.minRating = 0;\n    /** @deprecated; max should be used instead of maxRating */\n\n    this.maxRating = 5;\n    /** The upper limit of the rating */\n\n    this.max = 5;\n    /** Represents the current value of the rating */\n\n    this.rating = 0;\n    /** makes the rating non-interactive (but still accessible)  */\n\n    this.readonly = false;\n    /** disables input  */\n\n    this.disabled = false;\n    /** a11y text for getting meaningful value. `$rating` and `$max` (deprecated `$maxRating`) are template variables and will be replaces by their corresponding properties.  */\n\n    this.ariaLabelTranslation = '$rating out of $max stars';\n    /** (optional) rating label */\n\n    this.label = 'Rating';\n    /** (optional) info text */\n\n    this.hideLabel = false;\n\n    this.handleInput = function (ev) {\n      var input = ev.composedPath()[0];\n      var value = Number(input.value);\n\n      switch (true) {\n        case value < _this.minRating:\n          input.value = _this.minRating.toString();\n          break;\n\n        case value > _this.max:\n          input.value = _this.max.toString();\n          break;\n      }\n\n      _this.rating = Number(input.value);\n      emitEvent(_this, 'scaleChange', {\n        value: _this.rating\n      });\n    };\n\n    this.handleStarClick = function (ev) {\n      var star = ev.composedPath()[0];\n      var starValue = Number(star.dataset.value); // set focus on input to make arrow keys work to select stars\n\n      var input = _this.host.shadowRoot.querySelector('input');\n\n      input.focus();\n\n      if (starValue === 1 && _this.rating === 1 && _this.minRating === 0) {\n        _this.rating = _this.minRating;\n      } else {\n        _this.rating = starValue;\n      }\n\n      emitEvent(_this, 'scaleChange', {\n        value: _this.rating\n      });\n    };\n  }\n\n  _createClass(RatingStars, [{\n    key: \"componentWillRender\",\n    value: function componentWillRender() {\n      // make sure the deprecated props overwrite the actual ones if used\n      // and show status note deprecated\n      if (this.maxRating !== 5) {\n        this.max = this.maxRating;\n        statusNote({\n          tag: 'deprecated',\n          message: 'Property \"maxRating\" is deprecated. Please use the \"max\" property!',\n          type: 'warn',\n          source: this.host\n        });\n      }\n\n      if (this.minRating !== 0) {\n        statusNote({\n          tag: 'deprecated',\n          message: 'Property \"minRating\" is deprecated and will be deleted upon the next release',\n          type: 'warn',\n          source: this.host\n        });\n      }\n\n      if (this.starSize !== 'large') {\n        this.size = this.starSize;\n        statusNote({\n          tag: 'deprecated',\n          message: 'Property \"starSize\" is deprecated. Please use the \"size\" property!',\n          type: 'warn',\n          source: this.host\n        });\n      } // deactivate showing half stars while keeping the code\n\n\n      this.rating = Math.round(this.rating);\n    } // constructs the aria message for the current rating\n\n  }, {\n    key: \"getRatingText\",\n    value: function getRatingText() {\n      var filledText = this.ariaLabelTranslation.replace(/\\$rating/g, \"\".concat(this.rating)) // TODO: remove when `maxRating` is also being removed\n      .replace(/\\$maxRating/g, \"\".concat(this.max)).replace(/\\$max/g, \"\".concat(this.max));\n      return filledText;\n    }\n  }, {\n    key: \"renderStar\",\n    value: function renderStar(index) {\n      var selected = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var rating = arguments.length > 2 ? arguments[2] : undefined;\n      var size = sizes[this.size];\n      var isWholeNumber = rating % 1 === 0;\n      var isLastNumber = Math.ceil(rating) === index;\n      return h(\"div\", {\n        part: \"star\",\n        \"data-value\": index,\n        \"data-selected\": selected,\n        \"data-half\": isLastNumber && !isWholeNumber,\n        onMouseUp: !this.readonly && this.handleStarClick,\n        // sets up first star to be the resetter above the input element\n        style: {\n          zIndex: index === 1 ? '5' : 'auto'\n        }\n      }, h(\"scale-icon-action-favorite\", {\n        size: size,\n        part: \"placeholder-star\"\n      }), h(\"div\", {\n        class: \"icon-clip\"\n      }, h(\"scale-icon-action-favorite\", {\n        size: size,\n        selected: true,\n        part: \"selected-star\"\n      })));\n    }\n  }, {\n    key: \"renderRating\",\n    value: function renderRating() {\n      var stars = [];\n      var roundedRating = Math.ceil(this.rating);\n      var max = this.max;\n\n      for (var index = 1; index <= max; index++) {\n        var isSelected = roundedRating >= index;\n        stars.push(this.renderStar(index, isSelected, this.rating));\n      }\n\n      return stars;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return h(Host, {\n        class: {\n          hideLabel: this.hideLabel,\n          disabled: this.disabled,\n          readonly: this.readonly\n        }\n      }, h(\"div\", {\n        part: \"container\"\n      }, h(\"label\", {\n        id: \"\".concat(this.ratingStarId, \"-label\"),\n        part: \"label\",\n        htmlFor: this.ratingStarId\n      }, this.label), h(\"div\", {\n        part: \"content\"\n      }, h(\"div\", {\n        part: \"wrapper\",\n        \"aria-valuetext\": this.getRatingText(),\n        \"aria-orientation\": \"horizontal\",\n        \"aria-describedby\": this.infoText ? \"\".concat(this.ratingStarId, \"-infotext\") : false\n      }, h(\"input\", {\n        disabled: this.disabled,\n        readonly: this.readonly,\n        part: \"range-slider\",\n        type: this.readonly ? 'number' : 'range',\n        id: this.ratingStarId,\n        min: 0,\n        max: this.max + 1,\n        value: this.rating,\n        step: \"1\",\n        \"aria-labelledby\": \"\".concat(this.ratingStarId, \"-label\"),\n        \"aria-readonly\": this.readonly ? 'true' : false,\n        \"aria-valuemin\": this.minRating,\n        \"aria-valuemax\": this.max,\n        \"aria-valuenow\": this.rating,\n        \"aria-valuetext\": this.getRatingText(),\n        onInput: !this.readonly && this.handleInput\n      }), this.renderRating()), this.infoText && h(\"div\", {\n        part: \"infotext\",\n        id: \"\".concat(this.ratingStarId, \"-infotext\")\n      }, this.infoText))));\n    }\n  }, {\n    key: \"host\",\n    get: function get() {\n      return getElement(this);\n    }\n  }]);\n\n  return RatingStars;\n}();\n\nRatingStars.style = ratingStarsCss;\nexport { RatingStars as scale_rating_stars };","map":null,"metadata":{},"sourceType":"module"}