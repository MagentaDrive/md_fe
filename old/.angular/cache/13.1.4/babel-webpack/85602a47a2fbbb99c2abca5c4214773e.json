{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Thomas\\\\Desktop\\\\md_fe\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"C:\\\\Users\\\\Thomas\\\\Desktop\\\\md_fe\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport { r as registerInstance, h, a as Host, g as getElement } from './index-f2e5998d.js';\nimport { c as classnames } from './index-713f92a5.js';\nvar sidebarNavItemCss = \":host{--border-bottom-color:var(--scl-color-grey-10);--border-left-color-third-nesting:var(--scl-color-grey-70);--color-active:var(--scl-color-primary-active);--color-primary:var(--scl-color-primary);--background-color-before-active:var(--color-primary);--font-weight-bold:var(--scl-font-weight-bold);--box-shadow-focus:inset 0 0 0 var(--scl-spacing-2) var(--scl-color-focus)}.sidebar-nav-item{border-bottom-style:solid;border-bottom-width:1px;border-bottom-color:var(--border-bottom-color)}.sidebar-nav-item--active{position:relative;color:var(--color-primary)}.sidebar-nav-item--active::before{content:'';display:block;position:absolute;top:0;left:var(--left-current-border, 0);width:0;height:100%;background-color:var(--background-color-before-active);border-left:2px solid transparent}.sidebar-nav-item--condensed.sidebar-nav-item--active::before{left:-1px}:host([nesting-level='1']) .sidebar-nav-item,.sidebar-nav-item--bold{font-weight:var(--font-weight-bold)}:host([nesting-level='3']) .sidebar-nav-item{border-left-color:var(--border-left-color-third-nesting);border-left-style:solid;border-left-width:0.0625rem}::slotted(a){color:currentColor;display:block;padding-top:1rem;padding-right:1rem;padding-bottom:1rem;padding-left:var(--spacing-indent);border-radius:var(--scl-radius-2);text-decoration:none;outline:none}:host([nesting-level='2']) ::slotted(a){padding-left:calc(var(--spacing-indent) + 0.75rem)}::slotted(a:hover){color:var(--color-primary)}::slotted(a:focus){box-shadow:var(--box-shadow-focus)}::slotted(a:active){color:var(--color-active)}.sidebar-nav-item--condensed{border-bottom-width:0}.sidebar-nav-item--condensed ::slotted(a){padding-top:0.5rem;padding-left:0.75rem;padding-right:0.5rem;padding-bottom:0.5rem}\";\nvar SR_ACTIVE_TEXT = ' Zurzeit aktiv';\n\nvar isActive = function isActive(current) {\n  try {\n    return !!JSON.parse(current);\n  } catch (e) {\n    if (typeof current === 'string') {\n      return true;\n    }\n\n    return !!current;\n  }\n};\n\nvar getScreenReaderText = function getScreenReaderText(current) {\n  var text;\n\n  try {\n    text = JSON.parse(current);\n  } catch (e) {\n    text = current;\n  }\n\n  return typeof text === 'string' && text.length > 0 ? \" \".concat(text) : SR_ACTIVE_TEXT;\n};\n\nvar SidebarNavItem = /*#__PURE__*/function () {\n  function SidebarNavItem(hostRef) {\n    _classCallCheck(this, SidebarNavItem);\n\n    registerInstance(this, hostRef);\n    /** Used normally for third level items, remove the bottom border */\n\n    this.condensed = false;\n    /** Bold text */\n\n    this.bold = false;\n    /** Text gets the active color */\n\n    this.active = false;\n    /**\n     * Mark the child link as \"current\" with `aria-current=page`.\n     * Provide the text hint if needed, default is: \"Zurzeit aktiv\"\n     */\n\n    this.current = null;\n  }\n\n  _createClass(SidebarNavItem, [{\n    key: \"nestingLevelChanged\",\n    value: function nestingLevelChanged(newValue) {\n      if (newValue === 1) {\n        this.bold = true;\n      }\n    }\n  }, {\n    key: \"currentChanged\",\n    value: function currentChanged(newValue) {\n      this.handleAriaCurrentInSlottedA(newValue);\n      this.syncActiveToCurrent(newValue);\n    }\n  }, {\n    key: \"componentDidLoad\",\n    value: function componentDidLoad() {\n      this.handleAriaCurrentInSlottedA(this.current);\n\n      if (this.current) {\n        this.syncActiveToCurrent(this.current);\n      }\n    }\n    /**\n     * If an item is `current`, it should be `active` as well\n     */\n\n  }, {\n    key: \"syncActiveToCurrent\",\n    value: function syncActiveToCurrent(newValue) {\n      this.active = isActive(newValue);\n    }\n    /**\n     * When `current` is set, this will:\n     * - set the aria-current=page attribute on the link\n     * - append a text-only hint for screen readers\n     * so we end up with something like this:\n     * <a href=\"...\" aria-current=\"page\">\n     *    Example<span style=\"...visible to SR only...\"> Active link</span>\n     * </a>\n     * @param current this.current\n     */\n\n  }, {\n    key: \"handleAriaCurrentInSlottedA\",\n    value: function handleAriaCurrentInSlottedA(current) {\n      var a = this.el.querySelector('a');\n\n      if (this.srOnlyElement != null) {\n        a.removeChild(this.srOnlyElement);\n        this.srOnlyElement = null;\n      }\n\n      if (a != null) {\n        a.removeAttribute('aria-current');\n      }\n\n      if (isActive(current) && a != null) {\n        this.srOnlyElement = this.createScreenReaderOnlySpan();\n        a.appendChild(this.srOnlyElement);\n        a.setAttribute('aria-current', 'page');\n      }\n    }\n  }, {\n    key: \"createScreenReaderOnlySpan\",\n    value: function createScreenReaderOnlySpan() {\n      var text = getScreenReaderText(this.current);\n      var span = document.createElement('span'); // .sr-only but inline\n\n      Object.assign(span.style, {\n        position: 'absolute',\n        left: '-10000px',\n        overflow: 'hidden'\n      });\n      span.textContent = text;\n      return span;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return h(Host, null, this.styles && h(\"style\", null, this.styles), h(\"li\", {\n        part: this.getBasePartMap(),\n        class: this.getCssClassMap(),\n        role: \"listitem\"\n      }, h(\"slot\", null)));\n    }\n  }, {\n    key: \"getBasePartMap\",\n    value: function getBasePartMap() {\n      return this.getCssOrBasePartMap('basePart');\n    }\n  }, {\n    key: \"getCssClassMap\",\n    value: function getCssClassMap() {\n      return this.getCssOrBasePartMap('css');\n    }\n  }, {\n    key: \"getCssOrBasePartMap\",\n    value: function getCssOrBasePartMap(mode) {\n      var component = 'sidebar-nav-item';\n      var prefix = mode === 'basePart' ? '' : \"\".concat(component, \"--\");\n      return classnames(component, this.bold && \"\".concat(prefix, \"bold\"), this.condensed && \"\".concat(prefix, \"condensed\"), this.active && \"\".concat(prefix, \"active\"));\n    }\n  }, {\n    key: \"el\",\n    get: function get() {\n      return getElement(this);\n    }\n  }], [{\n    key: \"watchers\",\n    get: function get() {\n      return {\n        \"nestingLevel\": [\"nestingLevelChanged\"],\n        \"current\": [\"currentChanged\"]\n      };\n    }\n  }]);\n\n  return SidebarNavItem;\n}();\n\nSidebarNavItem.style = sidebarNavItemCss;\nexport { SidebarNavItem as scale_sidebar_nav_item };","map":null,"metadata":{},"sourceType":"module"}