{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Thomas\\\\Desktop\\\\md_fe\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"C:\\\\Users\\\\Thomas\\\\Desktop\\\\md_fe\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport { r as registerInstance, h, a as Host, g as getElement } from './index-f2e5998d.js';\nimport { s as statusNote } from './status-note-d227f142.js';\nvar checkboxGroupCss = \":host,.checkbox-group{--spacing-left-container:var(--scl-spacing-24);--spacing-left-checkbox:var(--scl-spacing-8);--spacing-top-slotted-item:var(--scl-spacing-4)}.checkbox-group{display:inline-flex;flex-direction:column}.checkbox-group [part='fieldset']{display:flex;flex-direction:column;border:0;padding:0;margin:0;margin-left:var(--spacing-left-container)}.checkbox-group legend{position:absolute;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;clip:rect(0, 0, 0, 0);white-space:nowrap;border-width:0}.checkbox-group scale-checkbox{margin:var(--spacing-top-slotted-item) 0}\";\n\nvar CheckboxGroup = /*#__PURE__*/function () {\n  function CheckboxGroup(hostRef) {\n    _classCallCheck(this, CheckboxGroup);\n\n    registerInstance(this, hostRef);\n    /** (optional) Input label */\n\n    this.label = '';\n    /** @deprecated - invalid should replace status */\n\n    this.status = '';\n    /** (optional) Input status */\n\n    this.invalid = false;\n    /** (optional) Input value */\n\n    this.value = '';\n    this.selectText = 'Select all';\n    this.unselectText = 'Unselect all';\n  }\n\n  _createClass(CheckboxGroup, [{\n    key: \"handleCheckboxChange\",\n    value: function handleCheckboxChange(ev) {\n      var el = ev.composedPath()[0];\n      var tagName = el.tagName,\n          checked = el.checked; // make sure the event belongs to a scale checkbox\n\n      if (tagName.toLowerCase() === 'scale-checkbox') {\n        if (el !== this.groupNode) {\n          this.updateParentCheckboxState();\n        } else {\n          this.updateChildrenCheckboxStates(checked);\n          this.updateParentCheckboxState();\n        }\n      }\n    }\n  }, {\n    key: \"componentDidRender\",\n    value: function componentDidRender() {\n      if (this.status !== '') {\n        statusNote({\n          tag: 'deprecated',\n          message: 'Property \"status\" is deprecated. Please use the \"invalid\" property!',\n          type: 'warn',\n          source: this.host\n        });\n      }\n    }\n  }, {\n    key: \"getChildNodes\",\n    value: function getChildNodes() {\n      return Array.from(this.host.querySelector('fieldset').querySelectorAll('scale-checkbox'));\n    }\n  }, {\n    key: \"updateChildrenCheckboxStates\",\n    value: function updateChildrenCheckboxStates(checked) {\n      var childNodes = this.getChildNodes().filter(function (node) {\n        return !node.disabled;\n      });\n      childNodes.forEach(function (node) {\n        if (checked !== undefined) {\n          node.checked = checked;\n          node.indeterminate = false;\n        }\n      });\n    }\n  }, {\n    key: \"updateParentCheckboxState\",\n    value: function updateParentCheckboxState() {\n      var childNodes = this.getChildNodes();\n      var checked = childNodes === null || childNodes === void 0 ? void 0 : childNodes.map(function (childNode) {\n        return childNode.checked;\n      });\n      var indeterminate = childNodes === null || childNodes === void 0 ? void 0 : childNodes.map(function (childNode) {\n        return childNode.indeterminate;\n      });\n      var disabled = childNodes === null || childNodes === void 0 ? void 0 : childNodes.map(function (childNode) {\n        return childNode.disabled;\n      });\n      var allChecked = checked.every(Boolean);\n      var someChecked = checked.some(Boolean);\n      var someIndeterminate = indeterminate.some(Boolean);\n      var allDisabled = disabled.every(Boolean);\n      this.checked = allChecked || someChecked;\n      this.indeterminate = someIndeterminate || someChecked && !allChecked;\n      this.disabled = allDisabled;\n      this.actionText = allChecked ? this.unselectText : this.selectText;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      return h(Host, {\n        class: \"checkbox-group\"\n      }, h(\"scale-checkbox\", {\n        ref: function ref(el) {\n          return _this.groupNode = el;\n        },\n        name: this.name,\n        label: this.label,\n        ariaLabel: \"\".concat(this.ariaLabel || this.label, \" - \").concat(this.actionText),\n        helperText: this.helperText,\n        status: this.status,\n        invalid: this.invalid,\n        value: this.value,\n        inputId: this.inputId,\n        checked: this.checked,\n        indeterminate: this.indeterminate,\n        disabled: this.disabled,\n        part: \"parent-checkbox\"\n      }), h(\"fieldset\", {\n        part: \"fieldset\"\n      }, h(\"legend\", null, this.ariaLabel || this.label), h(\"slot\", null)));\n    }\n  }, {\n    key: \"componentDidLoad\",\n    value: function componentDidLoad() {\n      this.updateParentCheckboxState();\n    }\n  }, {\n    key: \"host\",\n    get: function get() {\n      return getElement(this);\n    }\n  }]);\n\n  return CheckboxGroup;\n}();\n\nCheckboxGroup.style = checkboxGroupCss;\nexport { CheckboxGroup as scale_checkbox_group };","map":null,"metadata":{},"sourceType":"module"}